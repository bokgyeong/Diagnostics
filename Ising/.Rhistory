rm(list=ls())
library(fields)
library(lattice)
install.packages("fields")
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
#========================================================================
# Call a dataset, saved images, and functions
#========================================================================
load("data/sim020Ising.RData")
#========================================================================
# for ACD
#========================================================================
# number of particles
# dd = 200
# dd = 300
# dd = 400
dd = 450
aux.par = rep(0, dd)
load('ACD/AEX/simFDMH.RData')
FLiang = FLiang[-(1:500)]                               # burn in 500
stand =  (FLiang-min(FLiang))/(max(FLiang)-min(FLiang)) # standardized
stand = unique(stand)                                   # only take unique components
dmat = rdist(stand)                                     # distance mat
# choose auxiliary parameters through min max procedure
ind = 1; A = 1; Ac = 2:length(stand)
install.packages("fields")
library(fields)
FLiang = FLiang[-(1:500)]                               # burn in 500
stand =  (FLiang-min(FLiang))/(max(FLiang)-min(FLiang)) # standardized
stand = unique(stand)                                   # only take unique components
dmat = rdist(stand)                                     # distance mat
# choose auxiliary parameters through min max procedure
ind = 1; A = 1; Ac = 2:length(stand)
aux.par[1] = stand[ind]
ind = which.max( dmat[,A] )
A = c(A,ind)
Ac = Ac[-which(Ac==ind)]
aux.par[2] = stand[ind]
for(i in 3:dd){
dummy = max( apply( dmat[,A] , 1, min )[Ac] )
ind = which(dmat[,A] == dummy, arr.ind = T)[1]
A = c(A,ind)
Ac = Ac[-which(Ac==ind)]
aux.par[i] = stand[ind]
}
dist.aux.par = rdist(aux.par)  # distance matrix for aux.par (for standardized version)
aux.par = (max(FLiang)-min(FLiang))*aux.par + min(FLiang)
### step 2. Run AEX
burnin = 1000
# Niter = 20*100000 + burnin
Niter = 20*50000 + burnin
Numaux = 10000*dd
t0 = 25000
neighbor = 20
sigma = 0.1
cycle = 1
sourceCpp("RcppFtns.cpp")
sourceCpp("RcppFtns.cpp")
Rcpp::sourceCpp("RcppFtns.cpp")
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Rcpp::sourceCpp("RcppFtns.cpp")
Rcpp::sourceCpp("RcppFtns.cpp")
Rcpp::sourceCpp("RcppFtns.cpp")
sourceCpp("RcppFtns.cpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(Rcpp)
library(RcppArmadillo)
Rcpp::sourceCpp("RcppFtns.cpp")
