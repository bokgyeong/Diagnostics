rm(list=ls())
library(tidyverse)
library(egg)
library(gridExtra)
library(batchmeans)
library(Rcpp)
library(RcppArmadillo)
library(batchmeans)
library(grid)
get_legend<-function(myggplot){
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

nprocs = 20
ylimESS = c(5900, 8100)
ylimACD = c(0, 0.2)
# ylimAIKS = c(0, 0.8)
ylimAIKS = c(0, 0.5)
ylimDen = c(0, 20)
xlimDen = c(0.12, 0.27)
# =====================================
# DMH algorithm
# =====================================
# m = c(1:5, 50, 100)
# # burn = 10000
# diagLiang = data.frame()
# for(i in m){
#   load(paste('simAppxLiang', i, '.RData', sep = ''))
# 
#   # burn-in and stop ------------
#   # Liang = Liang[-(1:burn)]
#   # knots = seq(5000, length(Liang), by = 5000)
#   # niter = knots[which(sapply(knots, function(j) unlist(bm(Liang[1:j]))[2]) < 0.0005)[1]]
#   # Liang = Liang[1:niter]
#   # 
#   # start = which(Liang[1] == th)
#   # end = which(Liang[length(Liang)] == th)
#   # th = th[start:end]
#   # appx = appx[start:end,]
#   # nth = length(th)
#   
#   niter = 100000
#   qn = sapply(1:nth, function(i) sum(th[i]==Liang)/niter)
# 
#   # compute ACD ------------
#   source('RFtns.R')
#   ptm = proc.time()[3]
#   Hmat = appx[,2]
#   Jmat = appx[,3]
#   sensitivity = as.vector(-t(qn)%*%Hmat)
#   variability = as.vector(t(qn)%*%Jmat)
#   acd = ACD(sensitivity, variability)
#   timeACD = proc.time()[3] - ptm
# 
#   # compute AIKS ------------
#   sourceCpp("RcppFtns.cpp")
#   ptm = proc.time()[3]
#   score = appx[,1]
#   c = 1
#   beta = -1/2
#   wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, nth, nprocs)
#   aiks = sqrt(sum(wsq)) # L2 norm
#   timeAIKS = proc.time()[3] - ptm
# 
#   df = data.frame(m = as.factor(i), ACD = acd, AIKS = aiks, ESS = ess(Liang), timeACD = timeACD, timeAIKS = timeAIKS)
#   diagLiang = rbind(diagLiang, df)
# }
# save(diagLiang, m, file = 'summaryLiang.RData')


load('summaryLiang.RData')
essLiang = ggplot(diagLiang, aes(m, ESS, group = 1)) +
  coord_cartesian(ylim = ylimESS) +
  # labs(title = ' (B) DMH: Diagnostics') +
  geom_point() +
  geom_line()

acdLiang = ggplot(diagLiang, aes(m, ACD, group = 1)) +
  coord_cartesian(ylim = ylimACD) +
  # labs(title = '') +
  geom_point() +
  geom_line()

aiksLiang = ggplot(diagLiang, aes(m, AIKS, group = 1)) +
  coord_cartesian(ylim = ylimAIKS) +
  # labs(title = '') +
  geom_point() +
  geom_line()

load('simLiang.RData')
sampleLiang = data.frame()
for(i in diagLiang$m){
  df = data.frame(m = as.factor(i), parameter = Liang[[which(Nin == i)]])
  sampleLiang = rbind(sampleLiang, df)
}

thLiang = ggplot(sampleLiang, aes(x = parameter)) +
  geom_density(aes(color = m, linetype = m)) +
  coord_cartesian(xlim = xlimDen, ylim = ylimDen) +
  # labs(x = expression(theta), y = 'Density', title = '(d) DMH: Estimated Density') +
  labs(x = expression(theta), y = 'Density') +
  # theme(legend.position = c(0.8, 0.8),
  #       legend.key.size = unit(0.5, 'cm'))
  # theme(legend.position = 'bottom', legend.key.size = unit(0.1, 'cm')) +
  theme(legend.position = 'bottom', legend.key.size = unit(0.5, 'cm')) +
  # theme(legend.position = 'bottom') +
  guides(color = guide_legend(nrow=2, byrow=TRUE))

# leg.thLiang = get_legend(thLiang)
# thLiang = thLiang + theme(legend.position = 'none')

# grid.arrange(essLiang, acdLiang, aiksLiang, ncol = 3, top = 'DMH') # *280



# =====================================
# LikEm algorithm
# =====================================
# d = c(50, 100, 200)
# L = c(1000, 2000, 5000)
# 
# diagLikEm = data.frame()
# for(i in d){
#   for(j in L){
#     load(paste('simAppxLikEmd', i, 'N', j, '.RData', sep = ''))
# 
#     # burn-in and stop ------------
#     knots = seq(5000, length(LikEm), by = 5000)
#     # niter = knots[which(sapply(knots, function(j) unlist(bm(LikEm[1:j]))[2]) < 0.0005)[1]]
#     niter = 100000
#     LikEm = LikEm[1:niter]
# 
#     start = which(LikEm[1] == th)
#     end = which(LikEm[length(LikEm)] == th)
#     th = th[start:end]
#     appx = appx[start:end,]
#     nth = length(th)
# 
#     # compute ACD ------------
#     qn = sapply(1:nth, function(i) sum(th[i]==LikEm)/niter)
# 
#     Hmat = appx[,2]
#     Jmat = appx[,3]
#     sensitivity = as.vector(-t(qn)%*%Hmat)
#     variability = as.vector(t(qn)%*%Jmat)
#     acd = ACD(sensitivity, variability)
# 
#     # compute AIKS ------------
#     sourceCpp("RcppFtns.cpp")
#     score = appx[,1]
#     c = 1
#     beta = -1/2
#     wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, nth, nprocs)
#     aiks = sqrt(sum(wsq)) # L2 norm
# 
#     df = data.frame(d = as.factor(i), L = as.factor(j), ACD = acd, AIKS = aiks, ESS = ess(LikEm))
#     diagLikEm = rbind(diagLikEm, df)
#   }
# }
# save(diagLikEm, d, L, file = 'summaryLikEm.RData')


# load('summaryLikEm.RData')
# diagLikEm = diagLikEm %>% filter(L != 1000)
# essLikEm = ggplot(diagLikEm, aes(d, ESS, group = L)) +
#   labs(title = 'LikEm') +
#   # geom_point(aes(shape = L, color = L)) +
#   # geom_line(aes(color = L)) +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) +
#   theme(legend.position = c(0.8, 0.8),
#         legend.key.size = unit(0.5, 'cm'))
# 
# acdLikEm = ggplot(diagLikEm, aes(d, ACD, group = L)) +
#   coord_cartesian(ylim = ylimACD) +
#   # geom_point(aes(shape = L, color = L)) +
#   # geom_line(aes(color = L)) +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) +
#   theme(legend.position = 'none')
# 
# aiksLikEm = ggplot(diagLikEm, aes(d, AIKS, group = L)) +
#   coord_cartesian(ylim = ylimAIKS) +
#   # geom_point(aes(shape = L, color = L)) +
#   # geom_line(aes(color = L)) +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) +
#   theme(legend.position = 'none')
# 
# 
# load('simLikEm.RData')
# sampleLikEm = data.frame()
# for(i in unique(diagLikEm$d)){
#   for(j in unique(diagLikEm$L)){
#     df = data.frame(d = as.factor(i), L = as.factor(j), parameter = LikEm[[which(tun[,1] == i & tun[,2] == j)]])
#     sampleLikEm = rbind(sampleLikEm, df)
#   }  
# }
# 
# thLikEm = ggplot(sampleLikEm, aes(x = parameter)) +
#   geom_density(aes(color = d, linetype = L)) +
#   coord_cartesian(xlim = xlimDen, ylim = ylimDen) +
#   labs(x = expression(theta), y = 'Density') + 
#   theme(legend.position = 'bottom', legend.key.size = unit(0.1, 'cm')) +
#   guides(color = guide_legend(order=1, nrow=2, byrow=TRUE),
#          linetype = guide_legend(order=2, nrow=2, byrow=TRUE))

# leg.thLikEm = get_legend(thLikEm)
# thLikEm = thLikEm + theme(legend.position = 'none')

# legLikEm = get_legend(acdLikEm)
# acdLikEm = acdLikEm + theme(legend.position = 'none')
# grid.arrange(essLikEm, acdLikEm, aiksLikEm, legLikEm, ncol = 4, widths = c(1, 1, 1, 0.3), top = 'LikEm') # 600*280



# =====================================
# AEX
# =====================================
# d = c(50, 100, 200, 400)
# 
# # burn = 10000
# 
# diagAEX = data.frame()
# for(i in d){
#   load(paste('simAppxAEX', i, '.RData', sep = ''))
# 
#   # burn-in and stop ------------
#   # AEX = AEX[-(1:burn)]
#   # knots = seq(5000, length(AEX), by = 5000)
#   # niter = knots[which(sapply(knots, function(j) unlist(bm(AEX[1:j]))[2]) < 0.0005)[1]]
#   # AEX = AEX[1:niter]
#   #
#   # start = which(AEX[1] == th)
#   # end = which(AEX[length(AEX)] == th)
#   # th = th[start:end]
#   # appx = appx[start:end,]
#   # nth = length(th)
# 
#   niter = 100000
#   qn = sapply(1:nth, function(i) sum(th[i]==AEX)/niter)
#   
#   # compute ACD ------------
#   source('RFtns.R')
#   ptm = proc.time()[3]
#   Hmat = appx[,2]
#   Jmat = appx[,3]
#   sensitivity = as.vector(-t(qn)%*%Hmat)
#   variability = as.vector(t(qn)%*%Jmat)
#   acd = ACD(sensitivity, variability)
#   timeACD = proc.time()[3] - ptm
# 
#   # compute AIKS ------------
#   sourceCpp("RcppFtns.cpp")
#   ptm = proc.time()[3]
#   score = appx[,1]
#   c = 1
#   beta = -1/2
#   wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, nth, nprocs)
#   aiks = sqrt(sum(wsq)) # L2 norm
#   timeAIKS = proc.time()[3] - ptm
# 
#   df = data.frame(d = as.factor(i), ACD = acd, AIKS = aiks, ESS = ess(AEX), timeACD = timeACD, timeAIKS = timeAIKS)
#   diagAEX = rbind(diagAEX, df)
# }
# save(diagAEX, d, file = 'summaryAEX.RData')


load('summaryAEX.RData')
# diagAEX = diagAEX %>% filter(d != 400)
essAEX = ggplot(diagAEX, aes(d, ESS, group = 1)) +
  coord_cartesian(ylim = ylimESS) +
  # labs(title = 'AEX', y = 'ESS\n(higher is better)') +
  # labs(title = '(A) AEX: Diagnostics') +
  geom_point() +
  geom_line()

acdAEX = ggplot(diagAEX, aes(d, ACD, group = 1)) +
  # labs(y = 'ACD\n(lower is better)') +
  coord_cartesian(ylim = ylimACD) +
  # labs(title = '') +
  geom_point() +
  geom_line()

aiksAEX = ggplot(diagAEX, aes(d, AIKS, group = 1)) +
  # labs(y = 'AIKS\n(lower is better)') +
  coord_cartesian(ylim = ylimAIKS) +
  # labs(title = '') +
  geom_point() +
  geom_line()



sampleAEX = data.frame()
for(i in unique(diagAEX$d)){
  load(paste('simAEX', i, '.RData', sep = ''))
  df = data.frame(d = as.factor(i), parameter = AEX)
  sampleAEX = rbind(sampleAEX, df)
}

thAEX = ggplot(sampleAEX, aes(x = parameter)) +
  geom_density(aes(color = d, linetype = d)) +
  coord_cartesian(xlim = xlimDen, ylim = ylimDen) +
  # labs(x = expression(theta), y = 'Density', title = '(c) AEX: Estimated Density') +
  labs(x = expression(theta), y = 'Density') +
  # theme(legend.position = 'bottom', legend.key.size = unit(0.1, 'cm')) +
  theme(legend.position = 'bottom', legend.key.size = unit(0.5, 'cm')) +
  # theme(legend.position = 'bottom') +
  guides(color = guide_legend(nrow=2, byrow=TRUE))

# leg.thAEX = get_legend(thAEX)
# thAEX = thAEX + theme(legend.position = 'none')


# grid.arrange(essAEX, acdAEX, aiksAEX, ncol = 3) # 600*



# =====================================
# ALR
# =====================================
# d = c(50, 100, 200, 400)
# 
# # burn = 10000
# 
# diagAtchade = data.frame()
# for(i in d){
#   load(paste('simAppxAtchade', i, '.RData', sep = ''))
#   
#   # burn-in and stop ------------
#   # Atchade = Atchade[-(1:burn)]
#   # knots = seq(5000, length(Atchade), by = 5000)
#   # niter = knots[which(sapply(knots, function(j) unlist(bm(Atchade[1:j]))[2]) < 0.0005)[1]]
#   # Atchade = Atchade[1:niter]
#   #
#   # start = which(Atchade[1] == th)
#   # end = which(Atchade[length(Atchade)] == th)
#   # th = th[start:end]
#   # appx = appx[start:end,]
#   # nth = length(th)
#   
#   niter = 100000
#   
#   # compute ACD ------------
#   qn = sapply(1:nth, function(i) sum(th[i]==Atchade)/niter)
#   
#   Hmat = appx[,2]
#   Jmat = appx[,3]
#   sensitivity = as.vector(-t(qn)%*%Hmat)
#   variability = as.vector(t(qn)%*%Jmat)
#   acd = ACD(sensitivity, variability)
#   
#   # compute AIKS ------------
#   sourceCpp("RcppFtns.cpp")
#   score = appx[,1]
#   c = 1
#   beta = -1/2
#   wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, nth, nprocs)
#   aiks = sqrt(sum(wsq)) # L2 norm
#   
#   df = data.frame(d = as.factor(i), ACD = acd, AIKS = aiks, ESS = ess(Atchade))
#   diagAtchade = rbind(diagAtchade, df)
# }
# save(diagAtchade, d, file = 'summaryAtchade.RData')


# load('summaryAtchade.RData')
# # diagAtchade = diagAtchade %>% filter(d != 400)
# essAtchade = ggplot(diagAtchade, aes(d, ESS, group = 1)) +
#   labs(title = 'ALR') +
#   geom_point() +
#   geom_line()
# 
# acdAtchade = ggplot(diagAtchade, aes(d, ACD, group = 1)) +
#   coord_cartesian(ylim = ylimACD) +
#   geom_point() +
#   geom_line()
# 
# aiksAtchade = ggplot(diagAtchade, aes(d, AIKS, group = 1)) +
#   coord_cartesian(ylim = ylimAIKS) +
#   geom_point() +
#   geom_line()
# 
# 
# sampleAtchade = data.frame()
# for(i in unique(diagAtchade$d)){
#   load(paste('simAtchade', i, '.RData', sep = ''))
#   df = data.frame(d = as.factor(i), parameter = Atchade)
#   sampleAtchade = rbind(sampleAtchade, df)
# }
# 
# thAtchade = ggplot(sampleAtchade, aes(x = parameter)) +
#   geom_density(aes(color = d)) +
#   coord_cartesian(xlim = xlimDen, ylim = ylimDen) +
#   labs(x = expression(theta), y = 'Density') + 
#   # theme(legend.position = c(0.8, 0.8),
#   #       legend.key.size = unit(0.5, 'cm'))
#   theme(legend.position = 'bottom', legend.key.size = unit(0.1, 'cm')) +
#   guides(color = guide_legend(nrow=2, byrow=TRUE))

# leg.thAtchade = get_legend(thAtchade)
# thAtchade = thAtchade + theme(legend.position = 'none')



# ================================================================
# Plot
# ================================================================
# ggarrange(essAEX +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()), 
#           essAtchade +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           essLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           essLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdAEX +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()),
#           acdAtchade +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           aiksAEX,
#           aiksAtchade +
#             theme(axis.title.y = element_blank()),
#           aiksLiang +
#             theme(axis.title.y = element_blank()),
#           aiksLikEm +
#             theme(axis.title.y = element_blank()),
#           ncol = 4) # 850*550
# 
# 
# ggarrange(essAEX +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()), 
#           essAtchade +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           essLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           essLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdAEX +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()),
#           acdAtchade +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           aiksAEX,
#           aiksAtchade +
#             theme(axis.title.y = element_blank()),
#           aiksLiang +
#             theme(axis.title.y = element_blank()),
#           aiksLikEm +
#             theme(axis.title.y = element_blank()),
#           thAEX,
#           thAtchade +
#             theme(axis.title.y = element_blank()),
#           thLiang +
#             theme(axis.title.y = element_blank()),
#           thLikEm +
#             theme(axis.title.y = element_blank()),
#           ncol = 4) # 880*800




# legAEX = get_legend(thAEX)
# legLiang = get_legend(thLiang)
# thAEX = thAEX + theme(legend.position = 'none')
# thLiang = thLiang + theme(legend.position = 'none')
# 
# plotAEX = ggarrange(essAEX, acdAEX, aiksAEX, ncol = 3, top = grid::textGrob('(a) AEX: Diagnostics', gp = gpar(fontsize = 13), x = 0.05, hjust = 0))
# plotLiang = ggarrange(essLiang, acdLiang, aiksLiang, ncol = 3, top = grid::textGrob('(b) DMH: Diagnostics', gp = gpar(fontsize = 13), x = 0.05, hjust = 0))
# plotAEXden = ggarrange(thAEX, top = grid::textGrob('(c) AEX: Estimated Densities', gp = gpar(fontsize = 13), x = 0.1, hjust = 0))
# plotLiangden = ggarrange(thLiang, top = grid::textGrob('(d) DMH: Estimated Densities', gp = gpar(fontsize = 13), x = 0.1, hjust = 0))
# plotDen = grid.arrange(plotAEXden, plotLiangden, ncol = 2)
# plotLeg = grid.arrange(legAEX, legLiang, ncol = 2)
# grid.arrange(plotAEX, plotLiang, plotDen, plotLeg, heights = c(2, 2, 3, 0.5)) #600*760


diagLiang %>% summarise(minACD = min(ACD), minAIKS = min(AIKS))
diagAEX %>% summarise(minACD = min(ACD), minAIKS = min(AIKS))
