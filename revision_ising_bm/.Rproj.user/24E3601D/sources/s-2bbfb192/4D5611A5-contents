rm(list=ls())
library(coda)
library(ergm)
library(Rcpp)
library(RcppArmadillo)
library(MASS)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")

# set up for parallelization
nprocs = 12
# mp_type = "MPI"
mp_type = "PSOCK"
cl = parallel::makeCluster(nprocs, type=mp_type)
doParallel::registerDoParallel(cl)


#================================================================
# Call data and functions
#================================================================
k = 1
# k = 3
# k = 5
# k = 50
# k = 100
# k = 2
# k = 4

load(paste('simAppxLiang', k, '.RData', sep = ''))
score = appx[,1]


### aiks ---------------------------------------------------
c = 1
beta = -1/2
niter = length(Liang)
knots = seq(1000, niter, by = 100)
idx = sapply(knots, function(i) which(Liang[i] == th))

ptm = proc.time()[3]
aiksLiang = foreach(m = 1:length(idx), .combine = 'c', .packages = "Rcpp", .noexport = c("AIKS", "pAIKS", 'IsingAIKS', 'pIsingAIKS')) %dopar% {
  sourceCpp("RcppFtns.cpp")
  
  k = idx[m]
  n = knots[m]
  qn = sapply(1:k, function(i) sum(th[i]==Liang[1:n])/n)
  
  # # Stein kernel modified based on the parameter support
  wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, k, 1)
  
  # basic Stein kernel
  # wsq = pAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, k, 1)
  
  sqrt(sum(wsq)) # L2 norm
  # sum(sqrt(colSums(wsq))) # L1 norm
}
timeaiksLiang = proc.time()[3] - ptm
save(aiksLiang, knots, file = paste('simAIKSL2Liang', k, '.RData', sep = ''))
# save(aiksLiang, knots, file = paste('simBasicAIKSL2Liang', k, '.RData', sep = ''))



sourceCpp("RcppFtns.cpp")
score = appx[,1]
k = 5000
n = which(Liang == th[k])[length(which(Liang == th[k]))]
c = 1
beta = -1/2
system.time({
  qn = sapply(1:k, function(i) sum(th[i]==Liang[1:n])/n)
  wsq = pIsingAIKS(matrix(th, ncol = 1), matrix(score, ncol = 1), qn, c, beta, k, 20)
  sqrt(sum(wsq)) # L2 norm
})

