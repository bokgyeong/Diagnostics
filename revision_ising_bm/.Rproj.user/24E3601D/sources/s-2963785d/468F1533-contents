rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")


#========================================================================
# Call a dataset, saved images, and functions
#========================================================================
load("simIsing.RData")

source("RFtns.R")
sourceCpp("RcppFtns.cpp")


#========================================================================
# AEX
#========================================================================

### step 1. Conduct Liang's Fractional DMH to get auxiliary parameters
# m = 100   # number of auxiliary parameters
m = 200
aux.par = rep(0,m)
N1 = 10000

ptm = proc.time()[3]
FLiang = IsingFDMH(N1,10,MPLE,0.1,X)  # multiply 0.5 in c code
timeFLiang = proc.time()[3] - ptm

# save(FLiang, timeFLiang, file = "simFLiang.RData")
save(FLiang, timeFLiang, file = "simFLiang2.RData")

FLiang = FLiang[-(1:500)]                               # burn in 500
stand =  (FLiang-min(FLiang))/(max(FLiang)-min(FLiang)) # standardized  
stand = unique(stand)                                   # only take unique components
dmat = rdist(stand)                                     # distance mat

# choose auxiliary parameters through min max procedure
ind = 1; A = 1; Ac = 2:length(stand)
aux.par[1] = stand[ind]

ind = which.max( dmat[,A] )
A = c(A,ind)
Ac = Ac[-which(Ac==ind)]
aux.par[2] = stand[ind]

for(i in 3:m){
  dummy = max( apply( dmat[,A] , 1, min )[Ac] )
  # ind = which( dmat[,A] == dummy  )
  # if(ind < dim(dmat)[1]){ ind = ind }else{ ind = ind-floor( ind/dim(dmat)[1] )*dim(dmat)[1] }
  ind = which(dmat[,A] == dummy, arr.ind = T)[1]
  A = c(A,ind)
  Ac = Ac[-which(Ac==ind)]
  aux.par[i] = stand[ind]
}

dist.aux.par = rdist(aux.par)  # distance matrix for aux.par (for standardized version)
aux.par = (max(FLiang)-min(FLiang))*aux.par + min(FLiang)  


### step 2. Run AEX
Niter = 100000
Numaux = 20000
t0 = 20000
neighbor = 30
sigma = 0.1

ptm = proc.time()[3]
res = IsingAEX(Niter, Numaux, 1, t0, neighbor, aux.par, dist.aux.par, MPLE,sigma, X)
timeAEX = proc.time()[3] - ptm

AEX = res$par
# save(AEX, timeAEX, file = "simAEX.RData")
save(AEX, timeAEX, file = "simAEX2.RData")
