rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")


### set up for paralellization
nprocs = 19
# mp_type = "MPI"
mp_type = "PSOCK"
cl = parallel::makeCluster(nprocs, type=mp_type)
doParallel::registerDoParallel(cl)

#========================================================================
# Call a dataset, saved images, and functions
#========================================================================
# dd = 50
dd = 100
  
load("simIsing.RData")
# load("simAEX.RData")
# load("simAEX2.RData")
load(paste('simAEX', dd, '.RData', sep = ''))
source("RFtns.R")
sourceCpp("RcppFtns.cpp")


#========================================================================
# Approximate score and hessian
#========================================================================
burn = 0
niter = 100000
AEX = AEX[(burn+1):niter,]
th = unique(AEX)
nth = length(th)



# ### simulation by gibbs sampler
N = 100000
burn = 10000
Sx = Energy(X)

ptm = proc.time()[3]
appx = foreach(i = 1:nth, .combine = rbind, .packages = "Rcpp", .noexport = c("Energe", "GibbStat")) %dopar% {
  source("RFtns.R")
  sourceCpp("RcppFtns.cpp")
  
  Sy = GibbStat(X, th[i], N+burn)[-(1:burn)]
  score = approxScore(Sx, Sy)
  HJmat = approxHJmat(Sx, Sy)
  c(score, HJmat)
  
}
timeappx = proc.time()[3] - ptm
# save(AEX, th, nth, Sx, appx, timeappx, file = "simAppxAEX.RData")
# save(AEX, th, nth, Sx, appx, timeappx, file = "simAppxAEX2.RData")
save(AEX, th, nth, Sx, appx, timeappx, file = paste('simAppxAEX', dd, '.RData', sep = ''))
