{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\nload(\"isingData020.RData\")\nload(\"Moller020.RData\")\nload(\"zMoller020Perf.RData\")\n# load(\"zMoller020Perf_N4000.RData\")\n# load(\"Gold020.RData\")\n# load(\"zGold020Perf_N4000.RData\")\n# source(\"RFtns.R\")\n# sourceCpp(\"RcppFtns.cpp\")\n\n\n\n#======================================================================\n# IMQ KSD\n#======================================================================\n### empirical distribution for the sample\n# thinidx = seq(2, nrow(Moller), by = 2)\n# # thinidx = seq(10000+2, nrow(Moller), by = 2)\n# Moller = matrix(Moller[thinidx,], ncol=1)\n# zMoller = zMoller[thinidx,]\n\n\nz2 = zMoller[,2]; rm(zMoller, timezMoller)\nth = unique(Moller)\nnth = nrow(th)\n\n\n### compute approximate IMQ KSD\nN = 1000 # the number of simulated datasets used to approximate the score Sxistic\nc = 1\nbeta = -1/2\nregint = seq(1000, nrow(Moller), by = 100)\nidx = sapply(regint, function(i) which(Moller[i,1] == th[,1]))\n\n\n\n# set up for parallelization\nnprocs = 39\n# mp_type = \"MPI\"\nmp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\n# compute approximate knots\nptm = proc.time()[3]\nknot = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n  k0 = rep(0, nth)\n  for(ip in 1:nth){\n  # for(ip in i:nth){\n    bthi = Sx-z2[i]\n    bthip = Sx-z2[ip]\n    temp = c^2 + (th[i,] - th[ip,])^2\n    temp2 = th[i,]-th[ip,]\n    kn = temp^beta\n    knthi = 2*beta*(temp^(beta-1))*temp2\n    knthip = -knthi\n    knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n\n    k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n  }\n  k0\n}\ntimeknot = proc.time()[3] - ptm\n# save(timeknot, knot, file = \"knotMoller020.RData\")\n\n\n# load(\"knotMoller020.RData\")\n# compute approximate IMQ KSD\nptm = proc.time()[3]\naKSDMoller = foreach::foreach(k = idx, .combine = 'c') %dopar% {\n  j = which(idx == k)\n  n = regint[j]\n  qn = sapply(1:k, function(i) sum(Moller[1:n,1]==th[i,1])/n)\n  # qn = table(Moller[1:n,1])/n\n  \n  w = 0\n  for(i in 1:k){\n    w = w + qn[i]*sum(knot[i,1:k]*qn)\n  }\n  sqrt(w)\n  \n  # sqrt(t(qn) %*% knot[1:k, 1:k] %*% qn )[1,1]\n}\ntimeaKSDMoller = proc.time()[3] - ptm\n# save(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdMoller020.RData\")\n# save(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdMoller020_burn.RData\")\nsave(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdGold020_N4000.RData\")\n\n\n# plot(10000+regint, aKSDMoller, type = \"l\", ylim = c(0, max(aKSDMoller)))\n\n\nqn = table(Moller[,1])/nrow(Moller)\nqn[1]\n\nqn[1]*sum(knot[1,]*qn)\nqn[2]*sum(knot[2,]*qn)\nqn[3]*sum(knot[3,]*qn)\n\n\nw = 0\nfor(i in 1:nrow(knot)){\n  w = w + qn[i]*sum(knot[i,]*qn)\n}\nw\n\nsqrt(w)\n\nsum(knot[2,])\n\nlength(knot[1,])\nlength(qn)\n\nplot(density(Moller[,1]))\n\n\n# ptm = proc.time()[3]\n# knot = foreach(i = 1:nth, .combine = 'cbind') %:% \n#   foreach(ip=1:nth, .combine = 'c') %dopar% {\n#     bthi = Sx-z2[i]\n#     bthip = Sx-z2[ip]\n#     temp = c^2 + (th[i,1] - th[ip,1])^2\n#     temp2 = th[i,1]-th[ip,1]\n#     kn = temp^beta\n#     knthi = 2*beta*(temp^(beta-1))*temp2\n#     knthip = -knthi\n#     knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n#     \n#     bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n#   }\n# timeknot = proc.time()[3] - ptm\n# save(knot, timeknot, file = \"knotMoller020.RData\")\n# \n# \n# # compute approximate IMQ KSD\n# ptm = proc.time()[3]\n# aKSDMoller = foreach(k = idx, .combine = 'c') %dopar% {\n#   j = which(idx == k)\n#   n = regint[j]\n#   qn = sapply(1:k, function(i) sum(Moller[1:n,1]==th[i,1])/n)\n#   sqrt(t(qn) %*% knot[1:k, 1:k] %*% qn)[1,1]\n# }\n# timeaKSDMoller = proc.time()[3] - ptm\n# save(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdMoller020.RData\")\n\n",
    "created" : 1600883733651.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3401237186",
    "id" : "82C0B4AB",
    "lastKnownWriteTime" : 1601305417,
    "last_content_update" : 1601305417736,
    "path" : "~/work/approxKSD/ising/ksdMoller.R",
    "project_path" : "ksdMoller.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}