{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#================================================================\nload(\"simzMurray.RData\")\n\n\n\n#======================================================================\n# Diagnostic quantity\n#======================================================================\n### set up for parallelization\nnprocs = 19\nmp_type = \"MPI\"\n# mp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\nregint = seq(1000, length(Murray), by = 1000)\nidx = sapply(regint, function(i) which(Murray[i] == th))\n\nptm = proc.time()[3]\nbart = foreach(j = idx, .combine = 'rbind') %dopar% {\n  \n  m = which(idx == j)\n  n = regint[m]\n  qn = sapply(1:j, function(i) sum(th[i]==Murray[1:n])/n)\n  \n  # I Tilde\n  Ihat = t(qn) %*% (z[1:j,1] - (z[1:j,2])^2)\n  \n  # J Tilde\n  Uhat = sapply(1:j, function(ell) Sx - z[ell,2])\n  Jhat = t(qn) %*% (Uhat^2)\n  \n  # inv = sqrt((Ihat/Jhat - 1)^2)\n  inv = sqrt((Jhat/Ihat - 1)^2)\n  dif = abs(Ihat - Jhat)\n  \n  c(inv, dif)\n}\ntimebart = proc.time()[3] - ptm\n\n# save(regint, bart, file = \"simB2Murray.RData\")\nsave(regint, bart, file = \"simB2Murraymod.RData\")\n\n\n\n",
    "created" : 1607898786319.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "262217980",
    "id" : "55B454C0",
    "lastKnownWriteTime" : 1607898806,
    "last_content_update" : 1607898806931,
    "path" : "/storage/home/b/bxk487/work/diagnostics/ising/b2Murray.R",
    "project_path" : "b2Murray.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}