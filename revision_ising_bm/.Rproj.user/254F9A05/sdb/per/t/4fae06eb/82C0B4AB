{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\nload(\"isingData020.RData\")\nload(\"Moller020.RData\")\nload(\"zMoller020Perf.RData\")\nz2 = zMoller[,2]; rm(zMoller, timezMoller)\n# source(\"RFtns.R\")\n# sourceCpp(\"RcppFtns.cpp\")\n\n\n\n#======================================================================\n# IMQ KSD\n#======================================================================\n### empirical distribution for the sample\nth = unique(Moller)\nnth = nrow(th)\n\n\n### compute approximate IMQ KSD\nN = 1000 # the number of simulated datasets used to approximate the score Sxistic\nc = 1\nbeta = -1/2\nregint = seq(1000, nrow(Moller), by = 100)\nidx = sapply(1:length(regint), function(i) which(Moller[regint,1][i] == th[,1]))\n\n\n\n# set up for parallelization\nnprocs = 19\n# mp_type = \"MPI\"\nmp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\n# # compute approximate knots\n# ptm = proc.time()[3]\n# knot = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n#   k0 = rep(0, nth)\n#   for(ip in 1:nth){\n#     bthi = Sx-z2[i]\n#     bthip = Sx-z2[ip]\n#     temp = c^2 + (th[i,] - th[ip,])^2\n#     temp2 = th[i,]-th[ip,]\n#     kn = temp^beta\n#     knthi = 2*beta*(temp^(beta-1))*temp2\n#     knthip = -knthi\n#     knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n# \n#     k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n#   }\n#   k0\n# }\n# timeknot = proc.time()[3] - ptm\n# \n# \n# \n# # compute approximate IMQ KSD\n# ptm = proc.time()[3]\n# aKSDMoller = foreach::foreach(k = idx, .combine = 'c') %dopar% {\n#   j = which(idx == k)\n#   n = regint[j]\n#   qn = sapply(1:k, function(i) sum(Moller[1:n,1]==th[i,1])/n)\n#   w = sqrt(t(qn) %*% knot[1:k, 1:k] %*% qn )[1,1]\n#   sqrt(w^2) # L2 norm\n# }\n# timeaKSDMoller = proc.time()[3] - ptm\n# save(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdMoller020.RData\")\n\n\n\n\nptm = proc.time()[3]\nknot = foreach(i = 1:nth, .combine = 'cbind') %:% \n  foreach(ip=1:nth, .combine = 'c') %dopar% {\n    bthi = Sx-z2[i]\n    bthip = Sx-z2[ip]\n    temp = c^2 + (th[i,1] - th[ip,1])^2\n    temp2 = th[i,1]-th[ip,1]\n    kn = temp^beta\n    knthi = 2*beta*(temp^(beta-1))*temp2\n    knthip = -knthi\n    knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n    \n    bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n  }\ntimeknot = proc.time()[3] - ptm\nsave(knot, timeknot, file = \"knotMoller020.RData\")\n\n\n# compute approximate IMQ KSD\nptm = proc.time()[3]\naKSDMoller = foreach(k = idx, .combine = 'c') %dopar% {\n  j = which(idx == k)\n  n = regint[j]\n  qn = sapply(1:k, function(i) sum(Moller[1:n,1]==th[i,1])/n)\n  sqrt(t(qn) %*% knot[1:k, 1:k] %*% qn)[1,1]\n}\ntimeaKSDMoller = proc.time()[3] - ptm\nsave(timeknot, aKSDMoller, timeaKSDMoller, file = \"ksdMoller020.RData\")\n\n",
    "created" : 1600883733651.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4210717396",
    "id" : "82C0B4AB",
    "lastKnownWriteTime" : 1600884086,
    "last_content_update" : 1600884086095,
    "path" : "~/work/approxKSD/ising/ksdMoller.R",
    "project_path" : "ksdMoller.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}