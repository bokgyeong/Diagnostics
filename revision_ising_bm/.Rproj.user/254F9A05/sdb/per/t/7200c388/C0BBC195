{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(fields)\nlibrary(lattice)\nlibrary(coda)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(xtable)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n#========================================================================\n# Call a dataset, saved images, and functions\n#========================================================================\nload(\"isingData043.RData\")\n# load(\"isingData020.RData\")\nload(\"Moller043.RData\")\n# load(\"Moller020.RData\")\nsource(\"http://personal.psu.edu/muh10/MCMCtut/batchmeans.R\")\nsource(\"RFtns.R\")\nsourceCpp(\"RcppFtns.cpp\")\n\n\nset.seed(177)\n# #========================================================================\n# # Conduct Moller's Auxiliary method\n# #========================================================================\n# N = 10                     # number of lattice size\n# n = 50000                  # number of MCMC RUN\n# \n# ptm = proc.time()[3]\n# Moller = IsingMoller(n, MPLE, 0.1, X)\n# TimeMoller = proc.time()[3] - ptm\n# \n# save(Moller, file = \"Moller020.RData\")\n# # save(Moller, file = \"Moller043.RData\")\n# \n# \n# # par(mfrow=c(1,2))\n# # hist(Moller)\n# # ts.plot(Moller)\n# \n# # bm(Moller)\n# # HPDinterval(as.mcmc(Moller), prob = 0.95)\n# # length(unique(Moller))/n\n# # ess(Moller)\n# SummaryMoller = c(bm(Moller)$est, bm(Moller)$se, HPDinterval(as.mcmc(Moller), prob = 0.95)[1],\n#                    HPDinterval(as.mcmc(Moller), prob = 0.95)[2], ess(Moller), length(unique(Moller))/n, TimeMoller)\n# \n# save(SummaryMoller, Moller, file = \"Moller020.RData\")\n# # save(SummaryMoller, Moller, file = \"Moller043.RData\")\n\n#========================================================================\n# Approximate score and hessian\n#========================================================================\nN = 1000 # no of simulated datasets used to approximate the score statistic\nn = nrow(X)\nJ = nrow(Moller)\nSx = Energy(X) # Summary statistic of the observed data\n\n\n### set up for paralellization\nnprocs = 19\n# mp_type = \"MPI\"\nmp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n### simulation by perfect sampler\nptm = proc.time()[3]\nzMoller = foreach::foreach(j = 1:J, .combine = rbind, .packages = \"Rcpp\", .noexport = c(\"Energe\", \"pAuxStatPerf\", \"ProppWilson\")) %dopar% {\n  sourceCpp(\"RcppFtns.cpp\")\n  Sys = pAuxStatPerf(n, n, Moller[j,], N, 1)\n  z1 = colMeans(Sys^2) \n  z2 = colMeans(Sys)\n  c(z1, z2)\n}\ntimezMoller = proc.time()[3] - ptm\n# save(Sx, zMoller, timezMoller, file = \"zMoller020Perf.RData\")\nsave(Sx, zMoller, timezMoller, file = \"zMoller043Perf.RData\")\n",
    "created" : 1600874880134.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1511101234",
    "id" : "C0BBC195",
    "lastKnownWriteTime" : 1600442157,
    "last_content_update" : 1600442157,
    "path" : "~/work/approxKSD/ising/isingMoller.R",
    "project_path" : "isingMoller.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}