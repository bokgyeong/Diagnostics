{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(fields)\nlibrary(lattice)\nlibrary(coda)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(xtable)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n#========================================================================\n# Call a dataset, saved images, and functions\n#========================================================================\n# load(\"isingData043.RData\")\n# load(\"isingData020.RData\")\n# load(\"Murray020.RData\")\nload(\"isingData020n30.RData\")\nload(\"Murray020n30.RData\")\n# load(\"Murray020n30_2.RData\")\nsource(\"http://personal.psu.edu/muh10/MCMCtut/batchmeans.R\")\nsource(\"RFtns.R\")\nsourceCpp(\"RcppFtns.cpp\")\n\n\n#========================================================================\n# Conduct Murray's Exchagne Algorithm\n#========================================================================\nn = 1010000\n\n# ptm = proc.time()[3]\n# Murray = IsingExchange(n, MPLE, 0.1, X)\n# TimeMurray = proc.time()[3] - ptm\n# save(Murray, file = \"Murray020.RData\")\n\n# Murray = c()\n# init = MPLE\niter = nrow(Murray)\ninit = Murray[iter,]\nbpt = 10\n\n# for(b in 1:(n/bpt)){\nfor(b in 1:(n/bpt-iter)){\n  psample = IsingExchange(bpt, init, 0.1, X)\n  init = psample[bpt,]\n  Murray = rbind(Murray, psample)\n  save(Murray, file = \"Murray020n30.RData\")\n  # save(Murray, file = \"Murray020n30_2.RData\")\n}\n\n\n\n# #========================================================================\n# # Approximate score and hessian\n# #========================================================================\n# burn = 10000\n# niter = 50000\n# Murray = Murray[(burn+1):niter,]\n# th = unique(Murray)\n# nth = length(th)\n# \n# \n# # ### for thining\n# # burn = 10000\n# # niter = nrow(Murray)\n# # Murray = Murray[seq(burn+50, niter, by = 50),]\n# # th = unique(Murray)\n# # nth = length(th)\n# \n# \n# N = 1000 # no of simulated datasets used to approximate the score statistic\n# lsize = nrow(X)\n# Sx = Energy(X) # Summary statistic of the observed data\n# \n# \n# ### set up for paralellization\n# nprocs = 19\n# mp_type = \"MPI\"\n# # mp_type = \"PSOCK\"\n# cl = parallel::makeCluster(nprocs, type=mp_type)\n# doParallel::registerDoParallel(cl)\n# \n# \n# ### simulation by perfect sampler\n# ptm = proc.time()[3]\n# zMurray = foreach::foreach(i = 1:nth, .combine = rbind, .packages = \"Rcpp\", .noexport = c(\"Energe\", \"pAuxStatPerf\", \"ProppWilson\")) %dopar% {\n#   sourceCpp(\"RcppFtns.cpp\")\n#   Sys = pAuxStatPerf(lsize, lsize, th[i], N, 1)\n#   z1 = colMeans(Sys^2)\n#   z2 = colMeans(Sys)\n#   c(z1, z2)\n# }\n# timezMurray = proc.time()[3] - ptm\n# # save(Murray, th, nth, Sx, zMurray, timezMurray, file = \"zMurray020Perf.RData\")\n# # save(Murray, th, nth, Sx, zMurray, timezMurray, file = \"zMurray020Perf_thin.RData\")\n# save(Murray, th, nth, Sx, zMurray, timezMurray, file = \"zMurray020n30Perf.RData\")\n# # save(Murray, th, nth, Sx, zMurray, timezMurray, file = \"zMurray020n30Perf_thin.RData\")",
    "created" : 1603200114473.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3819028520",
    "id" : "B20D87FE",
    "lastKnownWriteTime" : 1603726590,
    "last_content_update" : 1603726590678,
    "path" : "~/work/approxKSD/ising/isingMurray.R",
    "project_path" : "isingMurray.R",
    "properties" : {
    },
    "relative_order" : 15,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}