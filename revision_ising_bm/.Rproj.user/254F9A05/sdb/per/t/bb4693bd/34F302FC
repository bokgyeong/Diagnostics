{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\n# load(\"isingData020.RData\")\n# load(\"Liang020.RData\")\n# load(\"zLiang020In50Perf.RData\")\n# load(\"zLiang020In50Perf_thin.RData\")\nload(\"zLiang020n30In50Perf.RData\")\n# load(\"zLiang020n30In50Perf_thin.RData\")\n\n\n#======================================================================\n# Approximate IKSD\n#======================================================================\nz2 = zLiangIn50[,2]; rm(zLiangIn50, timezLiangIn50)\n\n\nc = 1\nbeta = -1/2\nregint = seq(1000, length(Liang), by = 100)\nidx = sapply(regint, function(i) which(Liang[i] == th))\n\n\n### set up for parallelization\nnprocs = 19\n# mp_type = \"MPI\"\nmp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\n### compute approximate knots\n# Reflect the domain of the parameter space\nptm = proc.time()[3]\nknot = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n  k0 = rep(0, nth)\n  for(ip in 1:i){\n    bthi = Sx-z2[i]\n    bthip = Sx-z2[ip]\n    \n    temp = c^2 + (th[i] - th[ip])^2\n    temp2 = th[i]-th[ip]\n    kn = temp^beta\n    knthi = 2*beta*(temp^(beta-1))*temp2\n    knthip = -knthi\n    knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n    \n    w = th[i]*(th[i]-1)*th[ip]*(th[ip]-1)\n    wthi = th[ip]*(th[ip]-1)*(2*th[i]-1)\n    wthip = th[i]*(th[i]-1)*(2*th[ip]-1)\n    wthithip = (2*th[i]-1)*(2*th[ip]-1)\n    \n    kR = w*kn\n    kRthi = wthi*kn + w*knthi\n    kRthip = wthip*kn + w*knthip\n    kRthithip = wthithip*kn + wthip*knthi + wthi*knthip + w*knthithip\n    \n    k0[ip] = bthi*bthip*kR + bthi*kRthip + bthip*kRthi + kRthithip\n  }\n  k0\n}\ntimeknot = proc.time()[3] - ptm\n# save(timeknot, knot, file = \"knotLiang020In50Perf.RData\")\n\n\n\n### compute approximate IMQ KSD\n# load(\"knotLiang020In50Perf.RData\")\nptm = proc.time()[3]\naIKSDLiangIn50 = foreach::foreach(k = idx, .combine = 'c') %dopar% {\n  n = regint[which(idx == k)]\n  qn = sapply(1:k, function(i) sum(th[i]==Liang[1:n])/n)\n  \n  w = 0\n  for(i in 1:(k-1)){\n    w = w + (qn[i]^2)*knot[i,i] + qn[i]*sum(knot[i,(i+1):k]*qn[(i+1):k])*2\n  }\n  w = w + (qn[k]^2)*knot[k,k]\n  sqrt(w)\n  \n  # sqrt(t(qn) %*% knot[1:k, 1:k] %*% qn )[1,1]\n}\ntimeaIKSDLiangIn50 = proc.time()[3] - ptm\n# save(regint, timeknot, aIKSDLiangIn50, timeaIKSDLiangIn50, file = \"aiksdLiang020In50Perf.RData\")\n# save(regint, timeknot, aIKSDLiangIn50, timeaIKSDLiangIn50, file = \"aiksdLiang020In50Perf_thin.RData\")\nsave(regint, timeknot, aIKSDLiangIn50, timeaIKSDLiangIn50, file = \"aiksdLiang020n30In50Perf.RData\")\n# save(regint, timeknot, aIKSDLiangIn50, timeaIKSDLiangIn50, file = \"aiksdLiang020n30In50Perf_thin.RData\")\n\n",
    "created" : 1603167224488.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1780890292",
    "id" : "34F302FC",
    "lastKnownWriteTime" : 1603199969,
    "last_content_update" : 1603199969852,
    "path" : "~/work/approxKSD/ising/ksdLiangIn50.R",
    "project_path" : "ksdLiangIn50.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}