{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\nload(\"simzLiangIn1.RData\")\nsourceCpp(\"RcppFtns.cpp\")\n\n\n\n#======================================================================\n# Approximate IKSD\n#======================================================================\nz2 = z[,2]; rm(z, timez)\n\n\n# ### for running on julia\n# qn = sapply(1:nth, function(i) sum(th[i]==Liang)/nrow(Liang))\n# write.csv(z2, file = \"~/work/julia/z2LiangIn1_long.csv\", row.names = F)\n# write.csv(th, file = \"~/work/julia/thLiangIn1_long.csv\", row.names = F)\n# write.csv(qn, file = \"~/work/julia/qLiangIn1_long.csv\", row.names = F)\n# write.csv(Sx, file = \"~/work/julia/statLiangIn1_long.csv\", row.names = F)\n\n\n\n# c = 1\n# beta = -1/2\n# regint = seq(1000, length(Liang), by = 1000)\n# idx = sapply(regint, function(i) which(Liang[i] == th))\n# \n# \n# ### set up for parallelization\n# nprocs = 19\n# mp_type = \"MPI\"\n# # mp_type = \"PSOCK\"\n# cl = parallel::makeCluster(nprocs, type=mp_type)\n# doParallel::registerDoParallel(cl)\n# \n# \n# ptm = proc.time()[3]\n# aiksd = foreach(m = 1:length(idx), .combine = 'c', .packages = \"Rcpp\", .noexport = c(\"W2\", \"pW2\")) %dopar% {\n#   sourceCpp(\"RcppFtns.cpp\")\n#   \n#   k = idx[m]\n#   n = regint[m]\n#   qn = sapply(1:k, function(i) sum(th[i]==Liang[1:n])/n)\n#   \n#   wsq = pW2(matrix(th, ncol=1), Sx, matrix(z2, ncol=1), qn, c, beta, k, 1)\n#   sqrt(sum(wsq))\n# }\n# timeaiksd = proc.time()[3] - ptm\n# save(regint, aiksd, timeaiksd, file = \"simAIKSDLiangIn1.RData\")\n\n\n\n\n### computational cost\nc = 1\nbeta = -1/2\nregint = c(10000, 50000, 90000)\nidx = sapply(regint, function(i) which(Liang[i] == th))\n\n\n# ### set up for parallelization\n# nprocs = 19\n# mp_type = \"MPI\"\n# # mp_type = \"PSOCK\"\n# cl = parallel::makeCluster(nprocs, type=mp_type)\n# doParallel::registerDoParallel(cl)\n\n\ntimeaiksd = c()\n\nfor(m in 1:length(idx)){\n  ptm = proc.time()[3]\n  \n  k = idx[m]\n  n = regint[m]\n  qn = sapply(1:k, function(i) sum(th[i]==Liang[1:n])/n)\n  \n  wsq = pW2(matrix(th, ncol=1), Sx, matrix(z2, ncol=1), qn, c, beta, k, 20)\n  res = sqrt(sum(wsq))\n  \n  timeaiksd[m] = proc.time()[3] - ptm\n  \n}\nsave(regint, timeaiksd, file = \"simAIKSDTimeLiangIn1.RData\")\n",
    "created" : 1611157801832.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3163379473",
    "id" : "12764FAC",
    "lastKnownWriteTime" : 1611158502,
    "last_content_update" : 1611158502838,
    "path" : "~/work/diagnostics/ising/aiksdLiangIn1.R",
    "project_path" : "aiksdLiangIn1.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}