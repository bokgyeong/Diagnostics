{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\nload(\"simzLikEmd100N500.RData\")\nsourceCpp(\"RcppFtns.cpp\")\n\n\n\n#======================================================================\n# Approximate IKSD\n#======================================================================\nz2 = zLikEm[,3:4]; rm(zLikEm)\n\n\nc = 1\nbeta = -1/2\nregint = seq(1000, nrow(LikEm), by = 1000)\nidx = sapply(regint, function(i) which(LikEm[i,1] == th[,1]))\n\n\n# set up for parallelization\nnprocs = 19\nmp_type = \"MPI\"\n# mp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\n\n# ### compute approximate knots\n# ptm = proc.time()[3]\n# knot1 = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n#   k0 = rep(0, nth)\n#   for(ip in 1:i){\n#     bthi = stat[1]-z2[i,1]\n#     bthip = stat[1]-z2[ip,1]\n#     temp = c^2 + sum((th[i,1] - th[ip,1])^2)\n#     temp2 = th[i,1]-th[ip,1]\n#     kn = temp^beta\n#     knthi = 2*beta*(temp^(beta-1))*temp2\n#     knthip = -knthi\n#     knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n#     \n#     k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n#   }\n#   k0\n# }\n# timeknot1 = proc.time()[3] - ptm\n# \n# knot2 = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n#   k0 = rep(0, nth)\n#   for(ip in 1:i){\n#     bthi = stat[2]-z2[i,2]\n#     bthip = stat[2]-z2[ip,2]\n#     temp = c^2 + sum((th[i,2] - th[ip,2])^2)\n#     temp2 = th[i,2]-th[ip,2]\n#     kn = temp^beta\n#     knthi = 2*beta*(temp^(beta-1))*temp2\n#     knthip = -knthi\n#     knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n#     \n#     k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n#   }\n#   k0\n# }\n# timeknot2 = proc.time()[3] - ptm\n# \n# \n# ### compute approximate IMQ KSD\n# ptm = proc.time()[3]\n# aiksdLikEmd50N500 = foreach::foreach(k = idx, .combine = 'c') %dopar% {\n#   n = regint[which(idx == k)]\n#   qn = sapply(1:k, function(i) sum(th[i,1]==LikEm[1:n,1])/n)\n#   \n#   w1 = w2 = 0\n#   for(i in 1:(k-1)){\n#     w1 = w1 + (qn[i]^2)*knot1[i,i] + qn[i]*sum(knot1[i,(i+1):k]*qn[(i+1):k])*2\n#     w2 = w2 + (qn[i]^2)*knot2[i,i] + qn[i]*sum(knot2[i,(i+1):k]*qn[(i+1):k])*2\n#   }\n#   w1 = w1 + (qn[k]^2)*knot1[k,k]\n#   w2 = w2 + (qn[k]^2)*knot2[k,k]\n#   sqrt(w1 + w2)\n# }\n# timeaiksdLikEmd50N500 = proc.time()[3] - ptm\n# save(timeknot1, timeknot2, aiksdLikEmd50N500, timeaiksdLikEmd50N500, file = \"aiksdLikEm30d50N500_thin.RData\")\n\n\n\ncpoint = c(seq(1, length(idx), by = 100), length(idx)+1)\n# cpoint = c(seq(1, length(idx), by = 10), length(idx)+1)\naiksdLikEm = c(); resume = 1\n# resume = which(cpoint == length(aiksdLikEm)+1)\n\nfor(c in resume:(length(cpoint)-1)){\n  \n  res = foreach(m = cpoint[c]:(cpoint[c+1]-1), .combine = 'c', .packages = \"Rcpp\", .noexport = c(\"W2\", \"pW2\")) %dopar% {\n    sourceCpp(\"RcppFtns.cpp\")\n    \n    k = idx[m]\n    n = regint[m]\n    qn = sapply(1:k, function(i) sum(th[i,1]==LikEm[1:n,1])/n)\n    \n    wsq = pW2(th, stat, z2, qn, c, beta, k, 1)\n    sqrt(sum(wsq))\n  }\n  \n  aiksdLikEm = c(aiksdLikEm, res)\n  save(regint, aiksdLikEm, file = \"simAIKSDLikEmd100N500.RData\")\n}\n\n\n\n\n",
    "created" : 1608319111132.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "839805146",
    "id" : "C7883FFC",
    "lastKnownWriteTime" : 1608319627,
    "last_content_update" : 1608319627338,
    "path" : "~/work/diagnostics/ergm/magnolia/aiksdLikEmd100N500.R",
    "project_path" : "aiksdLikEmd100N500.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}