{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\n#library(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\n#======================================================================\n# Call functions \n#======================================================================\nsourceCpp(\"RcppFtns.cpp\")\n\n\n\nset.seed(1)\n#======================================================================\n# SIMULATION DTAT\n#======================================================================\nn = 30\ndata = network(n, density = 0.3, directed = FALSE) \nX = data[,]\nformula = data ~ edges + gwesp(0.25,fixed=TRUE)\nstat = summary(formula); stat\n#Summary(X)\nm = ergm(formula, estimate=\"MPLE\")\nhat = m$coef\nsummary(m)\nCOV <- solve(-m$hessian)\n\n\n\n### Set true parameter values\nLiang = ergmDMH(X, COV, matrix(hat, ncol = 2), 10000, 100)[-1,]\n# save.image(\"Sim_Data30.RData\")\nload(\"Sim_Data30.RData\")\ntrth = round(colMeans(Liang[-(1:5000),]), 2)\nX = Gibbs2(X, trth, 100)\nstat = Summary(X)\n\n# Sy = pResponseErgm(X, 10, trth, 1000, 1)\n# par(mfrow=c(1,2))\n# ts.plot(Sy[,1]); abline(h=stat[1], col=\"red\")\n# ts.plot(Sy[,2]); abline(h=stat[2], col=\"red\")\n# colMeans(Sy)\n# stat\n\ndata = network(X, directed = FALSE)\n#data = simulate(~ edges + gwesp(0.25,fixed=TRUE), nsim = 1, coef = trth, basis = net,\n#                control = control.simulate.formula(MCMC.burnin = 10000))\n#X = data[,]\n\n\n\n### Parameter estimation via MLE or MPLE\nformula = data ~ edges + gwesp(0.25,fixed=TRUE)\nstat = summary(formula); stat\n#Summary(X)\nm = ergm(formula, estimate=\"MPLE\")\nhat = m$coef\nsummary(m)\nCOV <- solve(-m$hessian)\n\n\nsave.image(\"ergmData30.RData\")\n\n\n\n\n# # Set Up Foreach\n# nprocs <- 2   # Note that we need to reserve 1 processor as the parent processor\n# #mp_type = \"MPI\" # Set as MPI\n# mp_type = \"PSOCK\"\n# cl <- parallel::makeCluster(nprocs, type=mp_type)\n# doParallel::registerDoParallel(cl)\n# \n# \n# foreach(i=1:1, .combine = cbind, .packages = c(\"ergm\", \"coda\")) %dopar% {\n#   library(ergm)\n#   library(coda)\n#   simulate(net ~ edges + gwesp(0.25,fixed=TRUE), nsim = 1, coef = trth,\n#            control = control.simulate.formula(MCMC.burnin = 10000))\n# }\n# \n# sessionInfo()\n# \n\n\n# # Load packages\n# library(snowfall)\n# # library(Rmpi); library(snow)\n# \n# # Set Up Snowfall\n# mp_type = \"SOCK\"\n# # mp_type = \"MPI\"\n# nprocs <- 1 \n# sfInit(parallel = TRUE, cpus = nprocs, type = mp_type )\n# sfLibrary(snow)\n# sfLibrary(snowfall)\n# \n# # Parallelize\n# sfSapply(1:1, function(i) simulate(net ~ edges + gwesp(0.25,fixed=TRUE), nsim = 1, coef = trth, control = control.simulate.formula(MCMC.burnin = 10000)), simplify = T)\n# sfStop()\n\n\n\n\n\n",
    "created" : 1607008429837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "16022998",
    "id" : "DF75BB1B",
    "lastKnownWriteTime" : 1603335327,
    "last_content_update" : 1603335327,
    "path" : "~/work/diagnostics/ergm/magnolia/ergmData.R",
    "project_path" : "ergmData.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}