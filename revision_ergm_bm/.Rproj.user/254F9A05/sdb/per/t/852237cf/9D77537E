{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(coda)\nlibrary(ergm)\nlibrary(Rcpp)\nlibrary(RcppArmadillo)\nlibrary(MASS)\nlibrary(snow)\nlibrary(doParallel)\nlibrary(foreach)\nSys.setenv(\"PKG_CXXFLAGS\"=\"-fopenmp\")\nSys.setenv(\"PKG_LIBS\"=\"-fopenmp\")\n\n\nset.seed(123)\n#======================================================================\n# Call data and functions\n#======================================================================\nload(\"zLiang30In1_thin.RData\")\n\n\n\n#======================================================================\n# Approximate IKSD\n#======================================================================\nz2 = zLiangIn1[,3:4]; rm(zLiangIn1)\n\n\n# ### for running on julia\n# qn = sapply(1:nth, function(i) sum(th[i,1]==Liang[,1])/nrow(Liang))\n# write.csv(z2, file = \"~/work/julia/z2Liang30In1_thin.csv\", row.names = F)\n# write.csv(th, file = \"~/work/julia/thLiang30In1_thin.csv\", row.names = F)\n# write.csv(qn, file = \"~/work/julia/qLiang30In1_thin.csv\", row.names = F)\n# write.csv(stat, file = \"~/work/julia/statLiang30In1_thin.csv\", row.names = F)\n\n\n\nc = 1\nbeta = -1/2\nregint = seq(1000, nrow(Liang), by = 100)\nidx = sapply(regint, function(i) which(Liang[i,1] == th[,1]))\n\n\n# set up for parallelization\nnprocs = 19\n# mp_type = \"MPI\"\nmp_type = \"PSOCK\"\ncl = parallel::makeCluster(nprocs, type=mp_type)\ndoParallel::registerDoParallel(cl)\n\n\n\n\n### compute approximate knots\nptm = proc.time()[3]\nknot1 = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n  k0 = rep(0, nth)\n  for(ip in 1:i){\n    bthi = stat[1]-z2[i,1]\n    bthip = stat[1]-z2[ip,1]\n    temp = c^2 + sum((th[i,1] - th[ip,1])^2) ##### must be c^2 + sum((th[i,] - th[ip,])^2)\n    temp2 = th[i,1]-th[ip,1]\n    kn = temp^beta\n    knthi = 2*beta*(temp^(beta-1))*temp2\n    knthip = -knthi\n    knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n    \n    k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n  }\n  k0\n}\ntimeknot1 = proc.time()[3] - ptm\n\n\nknot2 = foreach::foreach(i = 1:nth, .combine = cbind) %dopar% {\n  k0 = rep(0, nth)\n  for(ip in 1:i){\n    bthi = stat[2]-z2[i,2]\n    bthip = stat[2]-z2[ip,2]\n    temp = c^2 + sum((th[i,2] - th[ip,2])^2)\n    temp2 = th[i,2]-th[ip,2]\n    kn = temp^beta\n    knthi = 2*beta*(temp^(beta-1))*temp2\n    knthip = -knthi\n    knthithip = -2*beta*(temp^(beta-2))*(2*(temp2^2)*(beta-1)+temp)\n    \n    k0[ip] = bthi*bthip*kn + bthi*knthip + bthip*knthi + knthithip\n  }\n  k0\n}\ntimeknot2 = proc.time()[3] - ptm\n\n\n\n\n### compute approximate IMQ KSD\nptm = proc.time()[3]\naiksdLiangIn1 = foreach(k = idx, .combine = 'c') %dopar% {\n  n = regint[which(idx == k)]\n  qn = sapply(1:k, function(i) sum(th[i,1]==Liang[1:n,1])/n)\n  \n  w1 = w2 = 0\n  for(i in 1:(k-1)){\n    w1 = w1 + (qn[i]^2)*knot1[i,i] + qn[i]*sum(knot1[i,(i+1):k]*qn[(i+1):k])*2\n    w2 = w2 + (qn[i]^2)*knot2[i,i] + qn[i]*sum(knot2[i,(i+1):k]*qn[(i+1):k])*2\n  }\n  w1 = w1 + (qn[k]^2)*knot1[k,k]\n  w2 = w2 + (qn[k]^2)*knot2[k,k]\n  sqrt(w1 + w2)\n}\ntimeaiksdLiangIn1 = proc.time()[3] - ptm\nsave(regint, timeknot1, timeknot2, aiksdLiangIn1, timeaiksdLiangIn1, file = \"aiksdLiang30In1_thin.RData\")\n\n\n\n\n",
    "created" : 1604335148961.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "15767454",
    "id" : "9D77537E",
    "lastKnownWriteTime" : 1604335181,
    "last_content_update" : 1604335181435,
    "path" : "~/work/diagnostics/ergm/magnolia/aiksdLiangIn1.R",
    "project_path" : "aiksdLiangIn1.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}