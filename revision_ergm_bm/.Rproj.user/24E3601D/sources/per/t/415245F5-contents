rm(list=ls())
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(MASS)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")



#========================================================================
# call data and functions
#========================================================================
# Nin = 1
# Nin = 2
# Nin = 3
# Nin = 4
# Nin = 5
Nin = 6


# appx = list()
# start = 1; timeappx = 0
load(paste0('ACDAIKS/Liang/simAppxLiang', Nin, '.RData'))
start = length(appx) + 1


load(paste0('ACDAIKS/Liang/simLiang', Nin, '.RData'))


#========================================================================
# biased but consistent approximation
#========================================================================
niter = nrow(Liang)
# indice = burnin + 1:100000 # without thinning
indice = burnin + 1:500000 # without thinning
Liang =  Liang[indice,]
niter = nrow(Liang)

# nsets = 10
nsets = 50
Liang = sapply(1:nsets, function(i) Liang[((i-1) * (niter/nsets) + 1):(i * niter/nsets),], simplify = F)
th = sapply(1:nsets, function(i) unique(Liang[[i]]), simplify = F)
nth = sapply(1:nsets, function(i) nrow(th[[i]]))


### simulation by Gibbs sampler
N = 200000
burn = 1000

nprocs = 19
# nprocs = 7
mp_type = "PSOCK"
cl = parallel::makeCluster(nprocs, type=mp_type)
doParallel::registerDoParallel(cl)


for(j in start:nsets){
  
  ptm = proc.time()[3]
  appx[[j]] = foreach(i = 1:(nth[j]), .combine = 'rbind', .packages = "Rcpp") %dopar% {
    source("RFtns.R")
    sourceCpp("RcppFtns.cpp")
    Sy = Gibbs3(X, th[[j]][i,], N+burn)[-(1:burn),]
    c(f_Uhat(stat, Sy), f_dhat(stat, Sy))
  }
  timeappx = timeappx + proc.time()[3] - ptm
  
  save(Liang, th, nth, stat, appx, timeappx, file = paste0('ACDAIKS/Liang/simAppxLiang', Nin, '.RData'))
}

