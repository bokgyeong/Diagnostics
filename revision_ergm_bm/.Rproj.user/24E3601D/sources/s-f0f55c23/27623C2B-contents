rm(list=ls())
library(tidyverse)
library(gridExtra)
get_legend<-function(myggplot){
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

# ===================================================
# ACD and AIKS
# ===================================================
# tuning parameter of DMH
Nin = 1:3
# Nin = c(1:5, 50, 100)

# tuning parameters of LikEm
# LikEm2 (prior support determined by selected particles)
d = 1000
N = c(2000, 5000)
# ABCLik, DHHLik
# d = c(1000, 2000)
# d = c(400, 1000, 2000)
# N = c(5000, 10000)


# thres = 0.12
thres = 0.15

### new ACD ----------------------------------------------
newACD = data.frame()
load('simNewACDAEX2.RData')
df = data.frame(Algorithm = 'AEX', ACD = acdAEX[,1], Knots = knots)
newACD = rbind(newACD, df)
load('simNewACDAtchade.RData')
df = data.frame(Algorithm = 'ALR', ACD = acdAtchade[,1], Knots = knots)
newACD = rbind(newACD, df)
# load('simNewACDPrior.RData')
# df = data.frame(Algorithm = 'Prior', ACD = acdPrior[,1], Knots = knots)
# newACD = rbind(newACD, df)
for(i in Nin){
  load(paste("simNewACDLiang", i, ".RData", sep = ""))
  df = data.frame(Algorithm = paste('DMH (m=', i, ')', sep = ''), ACD = acdLiang[,1], Knots = knots)
  # df = data.frame(Algorithm = 'DMH', m = as.factor(i), ACD = acdLiang[,1], Knots = knots)
  newACD = rbind(newACD, df)
}
for(i in d){
  for(j in N){
    load(paste("simNewACDLikEm2d", i, 'N', j, ".RData", sep = "")) # ABC
    df = data.frame(Algorithm = paste('LikEm (d=', i, ', L=', j, ')', sep = ''), ACD = acdLikEm[,1], Knots = knots)
    newACD = rbind(newACD, df)
  }
}


# LikEm
# newACDLik = data.frame()
# for(i in d){
#   for(j in N){
#     load(paste("simNewACDLikEm2d", i, 'N', j, ".RData", sep = "")) # ABC
#     # load(paste("simNewACDLikEm4d", i, 'N', j, ".RData", sep = "")) # ABC
#     # load(paste("simNewACDABCLikd", i, 'N', j, ".RData", sep = "")) # ABC
#     # load(paste("simNewACDDMHLikd", i, 'N', j, ".RData", sep = "")) # ABC
#     df = data.frame(d = as.factor(i), L = as.factor(j), ACD = acdLikEm[,1], Knots = knots)
#     # df = data.frame(Algorithm = 'LikEm', d = as.factor(i), L = as.factor(j), ACD = acdLikEm[,1], Knots = knots)
#     newACDLik = rbind(newACDLik, df)
#   }
# }
# load('simNewACDAEX.RData')
# df = data.frame(d = 'AEX', L = 'NA', ACD = acdAEX[,1], Knots = knots)
# # df = data.frame(Algorithm = 'AEX', d = 'NA', L = 'NA', ACD = acdAEX[,1], Knots = knots)
# newACDLik = rbind(newACDLik, df)



### AIKS ----------------------------------------------
aiks = data.frame()
load('simAIKSL2AEX2.RData')
df = data.frame(Algorithm = 'AEX', AIKS = aiksAEX, Knots = knots)
# df = data.frame(Algorithm = 'AEX', m = 'NA', AIKS = aiksAEX, Knots = knots)
aiks = rbind(aiks, df)
load('simAIKSL2Atchade.RData')
df = data.frame(Algorithm = 'ALR', AIKS = aiksAtchade, Knots = knots)
aiks = rbind(aiks, df)
# load('simAIKSL2Prior.RData')
# df = data.frame(Algorithm = 'Prior', AIKS = aiksPrior, Knots = knots)
# aiks = rbind(aiks, df)
for(i in Nin){
  load(paste("simAIKSL2Liang", i, ".RData", sep = ""))
  df = data.frame(Algorithm = paste('DMH (m=', i, ')', sep = ''), AIKS = aiksLiang, Knots = knots)
  # df = data.frame(Algorithm = 'DMH', m = as.factor(i), AIKS = aiksLiang, Knots = knots)
  aiks = rbind(aiks, df)
}
for(i in d){
  for(j in N){
    load(paste("simAIKSL2LikEm2d", i, 'N', j, ".RData", sep = ""))
    df = data.frame(Algorithm = paste('LikEm (d=', i, ', L=', j, ')', sep = ''), AIKS = aiksLikEm, Knots = knots)
    aiks = rbind(aiks, df)
  }
}


# LikEm
# aiksLik = data.frame()
# for(i in d){
#   for(j in N){
#     load(paste("simAIKSL2LikEm2d", i, 'N', j, ".RData", sep = ""))
#     # load(paste("simAIKSL2LikEm4d", i, 'N', j, ".RData", sep = ""))
#     # load(paste("simAIKSL2ABCLikd", i, 'N', j, ".RData", sep = ""))
#     df = data.frame(d = as.factor(i), L = as.factor(j), AIKS = aiksLikEm, Knots = knots)
#     # df = data.frame(Algorithm = 'LikEm', d = as.factor(i), L = as.factor(j), AIKS = aiksLikEm, Knots = knots)
#     aiksLik = rbind(aiksLik, df)
#   }
# }
# load('simAIKSL2AEX.RData')
# df = data.frame(d = 'AEX', L = 'NA', AIKS = aiksAEX, Knots = knots)
# # df = data.frame(Algorithm = 'AEX', d = 'NA', L = 'NA', AIKS = aiksAEX, Knots = knots)
# aiksLik = rbind(aiksLik, df)


### Visualization ----------------------------------------------------
pnewACD = ggplot(newACD, aes(x = Knots, y = ACD)) +
  geom_line(aes(color = Algorithm)) +
  geom_hline(yintercept = thres, linetype = 2) +
  # geom_line(aes(size = Algorithm, linetype = Algorithm, color = m)) +
  coord_cartesian(ylim = c(NA, 0.25)) +
  # scale_size_manual(values = c('DMH' = 0.5, 'AEX' = 1)) +
  # guides(size = guide_legend(order = 1, ncol = 2),
  #        linetype = guide_legend(order = 1, ncol = 2),
  #        color = guide_legend(order = 2, ncol = 2)) +
  labs(x = "Number of sample points, n", y = "ACD")

# pnewACDLik = ggplot(newACDLik, aes(x = Knots, y = ACD)) +
#   geom_line(aes(color = d, linetype = L)) +
#   geom_hline(yintercept = thres, linetype = 2) +
#   # geom_line(aes(size = Algorithm, color = d, linetype = L)) +
#   # coord_cartesian(ylim = c(0, NA)) +
#   # coord_cartesian(ylim = c(0, max(c(newACD$ACD, newACDLik$ACD)))) +
#   # scale_size_manual(values = c('LikEm' = 0.5, 'AEX' = 1)) +
#   # guides(size = guide_legend(order = 1, ncol = 2),
#   #        color = guide_legend(order = 2, ncol = 2),
#   #        linetype = guide_legend(order = 3, ncol = 2)) +
#   # labs(x = "Number of sample points, n", y = "ACD")
#   guides(color = guide_legend(order = 1),
#          linetype = guide_legend(order = 2)) +
#   labs(x = "Number of sample points, n", y = "ACD")

pAIKS = ggplot(aiks, aes(x = Knots, y = AIKS)) +
  geom_line(aes(color = Algorithm)) +
  # geom_line(aes(size = Algorithm, linetype = Algorithm, color = m)) +
  coord_cartesian(ylim = c(NA, 4)) +
  labs(x = "Number of sample points, n", y = "AIKS") +
  # scale_size_manual(values = c('DMH' = 0.5, 'AEX' = 1)) +
  # guides(size = guide_legend(order = 1, ncol = 2),
  #        linetype = guide_legend(order = 1, ncol = 2),
  #        color = guide_legend(order = 2, ncol = 2)) +
  theme(legend.position = 'none')

# pAIKSLik = ggplot(aiksLik, aes(x = Knots, y = AIKS)) +
#   geom_line(aes(color = d, linetype = L)) +
#   # geom_line(aes(size = Algorithm, color = d, linetype = L)) +
#   # coord_cartesian(ylim = c(0, NA)) +
#   # coord_cartesian(ylim = c(0, max(c(aiks$AIKS, aiksLik$AIKS)))) +
#   labs(x = "Number of sample points, n", y = "AIKS") +
#   # scale_size_manual(values = c('LikEm' = 0.5, 'AEX' = 1)) +
#   # guides(size = guide_legend(order = 1, nrow = 1), 
#   #        color = guide_legend(order = 2, nrow = 2), 
#   #        linetype = guide_legend(order = 3, nrow = 2)) +
#   theme(legend.position = 'none')



# save and remove the legend
leg = get_legend(pnewACD)
# legLik = get_legend(pnewACDLik)
pnewACD = pnewACD + theme(legend.position="none")
# pnewACDLik = pnewACDLik + theme(legend.position="none")


# draw plots
grid.arrange(pnewACD, pAIKS, leg, ncol = 3, widths = c(1, 1, 0.55)) # 780*300
# grid.arrange(pnewACDLik, pAIKSLik, legLik, ncol = 3, widths = c(1, 1, 0.4), top = 'LikEm') # 780*330


newACD %>% group_by(Algorithm) %>% slice(n())


ggplot(newACD, aes(x = Knots, y = ACD)) +
  geom_line(aes(color = m)) +
  coord_cartesian(ylim = c(0, 0.4)) +
  labs(x = "Number of sample points, n", y = "ACD", title = 'ERGM') +
  theme(legend.position = 'bottom')

# ===================================================
# posterior density plots
# ===================================================
sample = data.frame()
load('simLiang.RData')
m = 1:3
for(i in m){
  df = data.frame(Algorithm = paste('DMH (m=', i, ")", sep=''), parameter = Liang[[which(Nin == i)]])
  sample = rbind(sample, df)
}
# load("simAEX.RData")
load("simAEX2.RData")
df = data.frame(Algorithm = "AEX", parameter = AEX)
sample = rbind(sample, df)
load("simAtchade.RData")
df = data.frame(Algorithm = "ALR", parameter = Atchade)
d = c(1000) # LikEm2 (ABC)
N = c(2000, 5000)
for(i in d){
  for(j in N){
    df = data.frame(Algorithm = paste('LikEm (d=', i, ', L=', j, ')', sep = ''), parameter = LikEm[[which(tuns[,1] == i & tuns[,2] == j)]])
    sample = rbind(sample, df)
  }
}

# LikEm (IS approximation with independent samples)
# sampleLik = data.frame()
# load('simLikEm2.RData')
# d = c(1000) # LikEm2 (ABC)
# N = c(2000, 5000)
# # load('simABCLik.RData')
# # d = c(1000, 2000) 
# # N = c(5000, 10000)
# for(i in d){
#   for(j in N){
#     df = data.frame(d = as.factor(i), L = as.factor(j), parameter = LikEm[[which(tuns[,1] == i & tuns[,2] == j)]])
#     # df = data.frame(Algorithm = 'LikEm', d = as.factor(i), L = as.factor(j), parameter = LikEm[[which(tuns[,1] == i & tuns[,2] == j)]])
#     sampleLik = rbind(sampleLik, df)
#   }
# }
# # # load("simAEX.RData")
# load("simAEX2.RData")
# df = data.frame(d = 'AEX', L = 'NA', parameter = AEX)
# # # df = data.frame(Algorithm = 'AEX', d = 'NA', L = 'NA', parameter = AEX)
# sampleLik = rbind(sampleLik, df)




### posterior density plot ----------------------------------
pTh1Liang = ggplot(sample, aes(x = parameter.1)) +
  geom_density(aes(color = Algorithm)) +
  scale_y_continuous(trans = "log") +
  labs(x = expression(theta[1]), y = 'Density') +
  theme(legend.position = 'none')

pTh2Liang = ggplot(sample, aes(x = parameter.2)) +
  geom_density(aes(color = Algorithm)) +
  scale_y_continuous(trans = "log") +
  labs(x = expression(theta[2]), y = 'Density') +
  theme(legend.position = 'none')

pBiLiang = ggplot(sample, aes(x = parameter.1, y = parameter.2)) +
  geom_density_2d(aes(color = Algorithm)) +
  scale_y_continuous(trans = "log") +
  labs(x = expression(theta[1]), y = expression(theta[2])) +
  theme(legend.position = 'none')

pTh1Lik = ggplot(sampleLik, aes(x = parameter.1)) +
  geom_density(aes(color = d, linetype = L)) +
  # geom_density(aes(size = Algorithm, color = d, linetype = L)) +
  # scale_y_continuous(trans = "log") +
  # scale_size_manual(values = c('LikEm' = 0.5, 'AEX' = 1)) +
  labs(x = expression(theta[1]), y = 'Density') +
  theme(legend.position = 'none')

pTh2Lik = ggplot(sampleLik, aes(x = parameter.2)) +
  geom_density(aes(color = d, linetype = L)) +
  # geom_density(aes(size = Algorithm, color = d, linetype = L)) +
  # scale_y_continuous(trans = "log") +
  # scale_size_manual(values = c('LikEm' = 0.5, 'AEX' = 1)) +
  labs(x = expression(theta[2]), y = 'Density') +
  theme(legend.position = 'none')

pBiLik = ggplot(sampleLik, aes(x = parameter.1, y = parameter.2)) +
  geom_density_2d(aes(color = d, linetype = L)) +
  # geom_density(aes(size = Algorithm, color = d, linetype = L)) +
  # scale_y_continuous(trans = "log") +
  # scale_size_manual(values = c('LikEm' = 0.5, 'AEX' = 1)) +
  labs(x = expression(theta[1]), y = expression(theta[2])) +
  theme(legend.position = 'none')

# draw
grid.arrange(pnewACD, pAIKS, leg, pTh1Liang, pTh2Liang, pBiLiang,
             ncol = 3) # 1000*600
grid.arrange(pnewACDLik, pAIKSLik, legLik, pTh1Lik, pTh2Lik, pBiLik,
             ncol = 3) # 1000*600


# ===============================================
# MCSE and ACD
# ===============================================
library(batchmeans)
library(coda)

### sample size for each algorithm (MCSE < 0.0005)
n = 40000
sample  %>%
  group_by(Algorithm) %>%
  slice(1:n) %>%
  summarise(Mean.1 = unlist(bm(parameter.1))[1], Mean.2 = unlist(bm(parameter.2))[1], 
            MCSE.1 = unlist(bm(parameter.1))[2], MCSE.2 = unlist(bm(parameter.2))[2])

size = data.frame(Algorithm = unique(sample$Algorithm), size = c(50000, 50000, 45000, 50000, 50000, 30000, 25000))
# size = data.frame(Algorithm = unique(sample$Algorithm), size = c(75000, 75000, 70000, 70000, 60000, 45000, 45000))

### cutoff for tail probability
alpha = 0.05 # for ABC-LikEm
# alpha = 0.1
# algo = 'AEX'
# algo = 'DMH (m=3)'
algo = 'LikEm (d=1000, L=5000)'
n = size[size$Algorithm == algo,2]
cutoff.th1 = sample %>% filter(Algorithm == algo) %>% slice(1:n) %>%
  # summarise(cutoff.1 = quantile(parameter.1, alpha/2), cutoff.2 = quantile(parameter.1, 1-alpha/2)) %>% round(2)
  summarise(cutoff = quantile(parameter.1, 1-alpha)) %>% round(2)
cutoff.th2 = sample %>% filter(Algorithm == algo) %>% slice(1:n) %>%
  # summarise(cutoff.1 = quantile(parameter.2, alpha/2), cutoff.2 = quantile(parameter.2, 1-alpha/2)) %>% round(2)
  summarise(cutoff = quantile(parameter.2, alpha)) %>% round(2)

# cutoff = as.matrix(-0.009) # for the right tail of theta1


tableDMHth1 = tableDMHth2 = tableDMHth = c()
algorithms = c('AEX', 'ALR', 'DMH (m=1)', 'DMH (m=2)', 'DMH (m=3)', 'LikEm (d=1000, L=2000)', 'LikEm (d=1000, L=5000)')
for(algo in algorithms){
  n = size[size$Algorithm == algo,2]
  res = sample  %>% 
    filter(Algorithm %in% algo) %>%
    group_by(Algorithm) %>% 
    slice(1:n) %>% 
    summarise(Mean.1 = round(unlist(bm(parameter.1))[1], 2), 
              HPDl.1 = round(HPDinterval(as.mcmc(parameter.1))[1],2), 
              HPDu.1 = round(HPDinterval(as.mcmc(parameter.1))[2],2)) %>% 
    add_column(sample %>% filter(Algorithm == algo) %>% slice(1:n) %>% 
                 # summarise(TP.1 = sum(parameter.1 <= cutoff.th1[1,1] | parameter.1 >= cutoff.th1[1,2])/n)) %>% 
                 summarise(TP.1 = sum(parameter.1 >= cutoff.th1[1,1])/n)) %>% 
    add_column(newACD %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select('ACD')) %>% 
    add_column(aiks %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select(-c('Algorithm')))
  res$ACD = round(res$ACD, 3)
  res$AIKS = round(res$AIKS, 3)
  res$TP.1 = round(res$TP.1, 2)
  tableDMHth1 = rbind(tableDMHth1, res)
}
for(algo in algorithms){
  n = size[size$Algorithm == algo,2]
  res = sample  %>% 
    filter(Algorithm %in% algo) %>%
    group_by(Algorithm) %>% 
    slice(1:n) %>% 
    summarise(Mean.2 = round(unlist(bm(parameter.2))[1], 2), 
              HPDl.2 = round(HPDinterval(as.mcmc(parameter.2))[1],2), 
              HPDu.2 = round(HPDinterval(as.mcmc(parameter.2))[2],2)) %>% 
    add_column(sample %>% filter(Algorithm == algo) %>% slice(1:n) %>% 
                 # summarise(TP.2 = sum(parameter.2 <= cutoff.th2[1,1] | parameter.2 >= cutoff.th2[1,2])/n)) %>% 
                 summarise(TP.2 = sum(parameter.2 <= cutoff.th2[1,1])/n)) %>% 
    add_column(newACD %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select('ACD')) %>% 
    add_column(aiks %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select(-c('Algorithm')))
  res$ACD = round(res$ACD, 3)
  res$AIKS = round(res$AIKS, 3)
  res$TP.2 = round(res$TP.2, 2)
  tableDMHth2 = rbind(tableDMHth2, res)
}
for(algo in algorithms){
  n = size[size$Algorithm == algo,2]
  res = sample  %>% 
    filter(Algorithm %in% algo) %>%
    group_by(Algorithm) %>% 
    slice(1:n) %>% 
    summarise(Mean.1 = round(unlist(bm(parameter.1))[1], 2), 
              HPDl.1 = round(HPDinterval(as.mcmc(parameter.1))[1],2), 
              HPDu.1 = round(HPDinterval(as.mcmc(parameter.1))[2],2)) %>% 
    add_column(sample %>% filter(Algorithm == algo) %>% slice(1:n) %>% 
                 summarise(TP = sum(parameter.1 >= cutoff.th1[1,1])/n + sum(parameter.2 <= cutoff.th2[1,1])/n)) %>%
    add_column(newACD %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select('ACD')) %>% 
    add_column(aiks %>% filter(Algorithm == algo) %>% slice(which(Knots == n)) %>% dplyr::select(-c('Algorithm')))
  res$ACD = round(res$ACD, 3)
  res$AIKS = round(res$AIKS, 3)
  res$TP = round(res$TP, 2)
  tableDMHth = rbind(tableDMHth, res)
}

tableDMHth1
tableDMHth2
tableDMHth





### computing time
load('simFLiang2.RData')
round(timeLiang[1] * size[size$Algorithm == 'DMH (m=1)',2] / 100000, 2)
round(timeLiang[2] * size[size$Algorithm == 'DMH (m=2)',2] / 100000, 2)
round(timeLiang[3] * size[size$Algorithm == 'DMH (m=3)',2] / 100000, 2)
round(timeLiang[4] * size[size$Algorithm == 'DMH (m=3)',2] / 100000, 2)
round(timeAEX * size[size$Algorithm == 'AEX',2] / 100000 + timeFLiang, 2)
round(timeAtchade * size[size$Algorithm == 'ALR',2] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[400, 1] == Liang[[1]][,1])[1]  / 100000, 2)


# ABC-LikEm
d;N
tuns
for(i in d){
  for(j in N){
    print(round(timeLikEm[which(tuns[,1] == i & tuns[,2] == j)] * size[size$Algorithm == paste('LikEm (d=', i, ', L=', j, ')', sep = ''),2] / 100000, 2))
  }
}


# DMH-LikEm
tuns
round(timeLikEm[2] * sizeLik[1,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[400, 1] == Liang[[1]][,1])[1] / 100000, 2)
round(timeLikEm[3] * sizeLik[2,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[400, 1] == Liang[[1]][,1])[1] / 100000, 2)
round(timeLikEm[5] * sizeLik[3,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[1000, 1] == Liang[[1]][,1])[1] / 100000, 2)
round(timeLikEm[6] * sizeLik[4,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[1000, 1] == Liang[[1]][,1])[1] / 100000, 2)
round(timeLikEm[8] * sizeLik[5,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[5000, 1] == Liang[[1]][,1])[1] / 100000, 2)
round(timeLikEm[9] * sizeLik[6,3] / 100000 + timeLiang[1] * which(unique(Liang[[1]])[5000, 1] == Liang[[1]][,1])[1] / 100000, 2)


