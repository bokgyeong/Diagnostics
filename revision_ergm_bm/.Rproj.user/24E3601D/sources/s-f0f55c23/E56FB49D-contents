rm(list=ls())
library(fields) # rdist
library(coda)   # HPD interval
library(ergm)
# library(igraphdata) # karate dataset
library(Rcpp)
library(RcppArmadillo)
library(DiceKriging)
library(DiceDesign)
library(MASS)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")


#======================================================================
# Call data and functions
#======================================================================
load("simData.RData")
# load('simLiang.RData') # for domain or particles
# load('simLikEm2.RData')
source("RFtns.R")
sourceCpp("RcppFtns.cpp")



#======================================================================
# GP MCMC
#======================================================================
# LikEm2
# d = c(400, 1000)
# N = c(2000, 5000, 10000)
# ABCLik
# d = c(400, 1000, 2000)
# N = c(1000, 2000, 5000, 10000)
# DMHLik
# d = c(400, 1000, 2000)
# N = c(1000, 2000, 5000, 10000)

tuns = matrix(c(rep(d, each = length(N)), rep(N, length(d))), ncol = 2)
Niter = 100000


# ### DMH particles (LikEm4, LikEm5, LikEm6)
# Liang = Liang[[1]][-(1:1000),]
# hat = apply(Liang,2,mean) # initial values
# parameter = unique(Liang) # particles


### domain of the parameter -----------------------
formula = data ~ edges + gwesp(0.25,fixed=TRUE)
m = ergm(formula, estimate = "MPLE")
wth = 3 # LikEm2, ABCLik
Domain = matrix(c(m$coef[1] - wth*sqrt(m$covar[1,1]), m$coef[1] + wth*sqrt(m$covar[1,1]),
                  m$coef[2] - wth*sqrt(m$covar[2,2]), m$coef[2] + wth*sqrt(m$covar[2,2])),2,2)



# ### run the algorithm ---------------------
# LikEm = list(); timeLikEm = c()
# for(i in d){
#   for(j in N){
#     k = which(tuns[,1] == i & tuns[,2] == j)
# 
#     ptm = proc.time()[3]
#     LikEm[[k]] = ergmGPmcmc(Niter, i, j, X, stat, Domain, 100, TRUE, 20) # LikEm2
#     # LikEm[[k]] = ergmGPmcmcDMH(Niter, i, j, X, stat, parameter, hat, 100, TRUE, 20)
#     # LikEm[[k]] = ergmABCLikPrior(Niter, i, j, X, stat, Domain, 100, 20) # ABCLik
#     # LikEm[[k]] = ergmDMHLikPrior(Niter, i, j, X, stat, parameter, hat, 100, 20)
#     timeLikEm[k] = proc.time()[3] - ptm
# 
#     # save(X, stat, trth, wth, tuns, Niter, LikEm, timeLikEm, file = "simLikEm2.RData")
#     # save(X, stat, trth, wth, tuns, Niter, LikEm, timeLikEm, file = "simABCLik.RData")
#   }
# }

k = 2
i = tuns[k,1]; j = tuns[k,2]
ptm = proc.time()[3]
LikEm[[k]] = ergmGPmcmc(Niter, i, j, X, stat, Domain, 100, TRUE, 20) # LikEm2
# LikEm[[k]] = ergmGPmcmcDMH(Niter, i, j, X, stat, parameter, hat, 100, TRUE, 20)
# LikEm[[k]] = ergmABCLikPrior(Niter, i, j, X, stat, Domain, 100, 20) # ABCLik
# LikEm[[k]] = ergmDMHLikPrior(Niter, i, j, X, stat, parameter, hat, 100, 20)
timeLikEm[k] = proc.time()[3] - ptm

save(X, stat, trth, wth, tuns, Niter, LikEm, timeLikEm, file = "simLikEm2.RData")
