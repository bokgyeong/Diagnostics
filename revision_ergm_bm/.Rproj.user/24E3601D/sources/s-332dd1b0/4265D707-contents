rm(list=ls())
library(tidyverse)
library(egg)
library(gridExtra)
library(batchmeans)
library(Rcpp)
library(RcppArmadillo)
library(batchmeans)
library
get_legend<-function(myggplot){
  tmp <- ggplot_gtable(ggplot_build(myggplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

nprocs = 6
# ylimACD = c(0.25, 0.5)
# ylimAIKS = c(4.5, 2566)
# ylimACD = c(0.25, 0.4)
# ylimAIKS = c(4.5, 104)
# ylimDen = c(0, 20)
# xlimDen = c(0.12, 0.27)
# =====================================
# AEX algorithm
# =====================================
# d = c(100, 200, 400)
# # burn = 10000
# diagAEX = data.frame()
# for(i in d){
#   load(paste('simAppxAEX', i, '.RData', sep = ''))
# 
#   # burn-in and stop ------------
#   # AEX = AEX[-(1:burn)]
#   # knots = seq(5000, length(AEX), by = 5000)
#   # niter = knots[which(sapply(knots, function(j) unlist(bm(AEX[1:j]))[2]) < 0.0005)[1]]
#   # niter = 50000
#   # AEX = AEX[1:niter,]
#   #
#   # start = which(AEX[,1] == th[,1])
#   # end = which(AEX[length(AEX)] == th)
#   # th = th[start:end,]
#   # appx = appx[start:end,]
#   # nth = length(th)
# 
#   niter = nrow(AEX)
# 
#   # compute ACD ------------
#   source('RFtns.R')
#   qn = sapply(1:nth, function(i) sum(th[i,2]==AEX[,2])/niter)
# 
#   p = 2
#   Hmat = appx[,(p+1):(p+p*(p+1)/2)]
#   Jmat = appx[,(p+p*(p+1)/2+1):(p+p*(p+1))]
#   sensitivity = as.vector(-t(qn)%*%Hmat)
#   variability = as.vector(t(qn)%*%Jmat)
#   acd = ACD(sensitivity, variability)
# 
#   # compute AIKS ------------
#   sourceCpp("RcppFtns.cpp")
#   score = appx[,1:p]
#   c = 1
#   beta = -1/2
#   w = sqrt(apply(pAIKS(th, score, qn, c, beta, nth, nprocs), 2, sum))
#   aiks = sqrt(sum(w^2)) # L2 norm
# 
#   df = data.frame(d = as.factor(i), ACD = acd, AIKS = aiks, ESS = min(apply(AEX, 2, ess)))
#   diagAEX = rbind(diagAEX, df)
# }
# save(diagAEX, d, file = 'summaryAEX.RData')


# load('summaryAEX.RData')
# 
# essAEX = ggplot(diagAEX, aes(d, ESS, group = 1)) +
#   labs(title = 'AEX', y = 'minimum ESS') +
#   geom_point() +
#   geom_line()
# 
# acdAEX = ggplot(diagAEX, aes(d, ACD, group = 1)) +
#   # coord_cartesian(ylim = ylimACD) +
#   geom_point() +
#   geom_line()
# 
# aiksAEX = ggplot(diagAEX, aes(d, AIKS, group = 1)) +
#   # coord_cartesian(ylim = ylimAIKS) +
#   geom_point() +
#   geom_line()



# =====================================
# DMH algorithm
# =====================================
# m = c(10000, 30000, 50000, 70000, 100000)
# # burn = 10000
# diagLiang = data.frame()
# for(i in m){
#   load(paste('simAppxLiang', i, '.RData', sep = ''))
# 
#   # burn-in and stop ------------
#   # Liang = Liang[-(1:burn)]
#   # knots = seq(5000, length(Liang), by = 5000)
#   # niter = knots[which(sapply(knots, function(j) unlist(bm(Liang[1:j]))[2]) < 0.0005)[1]]
#   # niter = 50000
#   # Liang = Liang[1:niter,]
#   # 
#   # start = which(Liang[,1] == th[,1])
#   # end = which(Liang[length(Liang)] == th)
#   # th = th[start:end,]
#   # appx = appx[start:end,]
#   # nth = length(th)
#   
#   niter = nrow(Liang)
# 
#   # compute ACD -----------
#   source('RFtns.R') 
#   qn = sapply(1:nth, function(i) sum(th[i,2]==Liang[,2])/niter)
# 
#   p = 4
#   Hmat = appx[,(p+1):(p+p*(p+1)/2)]
#   Jmat = appx[,(p+p*(p+1)/2+1):(p+p*(p+1))]
#   sensitivity = as.vector(-t(qn)%*%Hmat)
#   variability = as.vector(t(qn)%*%Jmat)
#   acd = ACD(sensitivity, variability)
# 
#   # compute AIKS ------------
#   sourceCpp("RcppFtns.cpp")
#   score = appx[,1:p]
#   c = 1
#   beta = -1/2
#   w = sqrt(apply(pAIKS(th, score, qn, c, beta, nth, nprocs), 2, sum))
#   aiks = sqrt(sum(w^2)) # L2 norm
# 
#   df = data.frame(m = as.factor(i), ACD = acd, AIKS = aiks, ESS = min(apply(Liang, 2, ess)))
#   diagLiang = rbind(diagLiang, df)
# }
# save(diagLiang, m, file = 'summaryLiang.RData')


# load('summaryLiang.RData')
# diagLiang = diagLiang %>% filter(m != 100000)
# 
# essLiang = ggplot(diagLiang, aes(m, ESS, group = 1)) +
#   labs(title = 'DMH', y = 'minimum ESS') +
#   geom_point() +
#   geom_line()
# 
# acdLiang = ggplot(diagLiang, aes(m, ACD, group = 1)) +
#   # coord_cartesian(ylim = ylimACD) +
#   geom_point() +
#   geom_line()
# 
# aiksLiang = ggplot(diagLiang, aes(m, AIKS, group = 1)) +
#   # coord_cartesian(ylim = ylimAIKS) +
#   geom_point() +
#   geom_line()


# =====================================
# LikEm algorithm
# =====================================
# d = c(100, 200, 400)
# L = c(2000, 5000)
# 
# diagLikEm = data.frame()
# for(i in d){
#   for(j in L){
#     load(paste('simAppxLikEmd', i, 'N', j, '.RData', sep = ''))
#     
#     # burn-in and stop ------------
#     # LikEm = LikEm[-(1:burn)]
#     # knots = seq(5000, length(LikEm), by = 5000)
#     # niter = knots[which(sapply(knots, function(j) unlist(bm(LikEm[1:j]))[2]) < 0.0005)[1]]
#     # niter = 50000
#     # LikEm = LikEm[1:niter,]
#     #
#     # start = which(LikEm[,1] == th[,1])
#     # end = which(LikEm[length(LikEm)] == th)
#     # th = th[start:end,]
#     # appx = appx[start:end,]
#     # nth = length(th)
#     
#     niter = nrow(LikEm)
#     
#     # compute ACD ------------
#     source('RFtns.R')
#     qn = sapply(1:nth, function(i) sum(th[i,2]==LikEm[,2])/niter)
#     
#     p = 4
#     Hmat = appx[,(p+1):(p+p*(p+1)/2)]
#     Jmat = appx[,(p+p*(p+1)/2+1):(p+p*(p+1))]
#     sensitivity = as.vector(-t(qn)%*%Hmat)
#     variability = as.vector(t(qn)%*%Jmat)
#     acd = ACD(sensitivity, variability)
#     
#     # compute AIKS ------------
#     sourceCpp("RcppFtns.cpp")
#     score = appx[,1:p]
#     c = 1
#     beta = -1/2
#     w = sqrt(apply(pAIKS(th, score, qn, c, beta, nth, nprocs), 2, sum))
#     aiks = sqrt(sum(w^2)) # L2 norm
#     
#     df = data.frame(d = as.factor(i), L = as.factor(j), ACD = acd, AIKS = aiks, ESS = min(apply(LikEm, 2, ess)))
#     diagLikEm = rbind(diagLikEm, df)
#   }
# }
# save(diagLikEm, d, L, file = 'summaryLikEm.RData')


# load('summaryLikEm.RData')
# # diagLikEm = diagLikEm %>% filter(d != 100)
# essLikEm = ggplot(diagLikEm, aes(d, ESS, group = L)) +
#   labs(title = 'LikEm') +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) + 
#   # theme(legend.position = c(0.8, 0.2),
#   #       legend.key.size = unit(0.5, 'cm'))
#   theme(legend.position = 'none')
# 
# acdLikEm = ggplot(diagLikEm, aes(d, ACD, group = L)) +
#   # coord_cartesian(ylim = ylimACD) +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) +
#   # theme(legend.position = 'none')
#   theme(legend.position = 'right')
# 
# aiksLikEm = ggplot(diagLikEm, aes(d, AIKS, group = L)) +
#   # coord_cartesian(ylim = ylimAIKS) +
#   geom_point(aes(shape = L)) +
#   geom_line(aes(linetype = L)) +
#   theme(legend.position = 'none')


# ================================================================
# plot
# ================================================================
# ggarrange(essLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()), 
#           essLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           acdLiang +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank()),
#           acdLikEm +
#             theme(axis.text.x = element_blank(),
#                   axis.ticks.x = element_blank(),
#                   axis.title.x = element_blank(),
#                   axis.title.y = element_blank()),
#           aiksLiang,
#           aiksLikEm +
#             theme(axis.title.y = element_blank()),
#           ncol = 2) # 850*550

