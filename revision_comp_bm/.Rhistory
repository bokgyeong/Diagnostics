# load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', 8, '.RData'))
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', 3, '.RData'))
aiksCutoff = quantile(aiksBootTrunc, 1-al)
# ==============================================================================
# Diagnostics
# ==============================================================================
# Truncation algorithm
# ------------------------------------------------------------------------------
diagTrunc = data.frame()
# m = c(3:4, 8:10, 20, 30)
m = c(3, 8:10, 30)
# m = c(8:10, 20, 30)
for(i in m){
### ACD
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2ACDTrunc', i, '.RData'))
df = data.frame(Method = 'ACD', Algorithm = 'Truncation', m = as.factor(i),
Value = acdTrunc, rtime = timeacdTrunc,
Below = ifelse(acdTrunc < qchisq(1-al, 55), TRUE, FALSE))
diagTrunc = rbind(diagTrunc, df)
### AIKS
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', i, '.RData'))
df = data.frame(Method = 'AIKS', Algorithm = 'Truncation', m = as.factor(i),
Value = aiksTrunc, rtime = timeaiksTrunc,
Below = ifelse(aiksTrunc < aiksCutoff, TRUE, FALSE))
diagTrunc = rbind(diagTrunc, df)
### ESS
load(paste0('ACDAIKS/Trunc_knu/bids2Trunc', i, '.RData'))
df = data.frame(Method = 'ESS', Algorithm = 'Truncation', m = as.factor(i),
Value = round(min(apply(Trunc[burn+1:n,], 2, ess))),
# Value = round(multiESS(Trunc[burn+1:n,])),
rtime = NA, Below = NA)
diagTrunc = rbind(diagTrunc, df)
}
diagTrunc
rm(list=ls())
library(dplyr); library(ggplot2); library(egg); library(gridExtra); library(grid)
library(batchmeans); library(mcmcse)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
al = 0.01
# al = 0.05
n = 300000
# n = 400000
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', 8, '.RData'))
aiksCutoff = quantile(aiksBootTrunc, 1-al)
aiksCutoff
# ==============================================================================
# Diagnostics
# ==============================================================================
# Truncation algorithm
# ------------------------------------------------------------------------------
diagTrunc = data.frame()
# m = c(3:4, 8:10, 20, 30)
m = c(3, 8:10, 30)
# m = c(8:10, 20, 30)
for(i in m){
### ACD
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2ACDTrunc', i, '.RData'))
df = data.frame(Method = 'ACD', Algorithm = 'Truncation', m = as.factor(i),
Value = acdTrunc, rtime = timeacdTrunc,
Below = ifelse(acdTrunc < qchisq(1-al, 55), TRUE, FALSE))
diagTrunc = rbind(diagTrunc, df)
### AIKS
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', i, '.RData'))
df = data.frame(Method = 'AIKS', Algorithm = 'Truncation', m = as.factor(i),
Value = aiksTrunc, rtime = timeaiksTrunc,
Below = ifelse(aiksTrunc < aiksCutoff, TRUE, FALSE))
diagTrunc = rbind(diagTrunc, df)
### ESS
load(paste0('ACDAIKS/Trunc_knu/bids2Trunc', i, '.RData'))
df = data.frame(Method = 'ESS', Algorithm = 'Truncation', m = as.factor(i),
Value = round(min(apply(Trunc[burn+1:n,], 2, ess))),
# Value = round(multiESS(Trunc[burn+1:n,])),
rtime = NA, Below = NA)
diagTrunc = rbind(diagTrunc, df)
}
diagTrunc
# ------------------------------------------------------------------------------
# ESS
# ------------------------------------------------------------------------------
plotESSTrunc = diagTrunc %>%
filter(Method == 'ESS') %>%
ggplot(aes(m, Value, group = 1)) +
geom_point(size = 2, shape = 16) +
geom_line(color = 'gray45') +
# coord_cartesian(ylim = c(NA, 11000)) +
coord_cartesian(ylim = c(NA, 8000)) +
labs(x = 'k', y = 'Minimum ESS')
# ------------------------------------------------------------------------------
# ACD
# ------------------------------------------------------------------------------
plotACDTrunc = diagTrunc %>%
filter(Method == 'ACD') %>%
ggplot(aes(m, Value, group = 1)) +
geom_point(aes(shape = Below, color = Below), size = 2) +
scale_shape_manual(values = c('FALSE' = 17, 'TRUE' = 15)) +
geom_line(color = 'gray45') +
geom_hline(yintercept = qchisq(1-al, 55), linetype = 2) +
# coord_cartesian(ylim = c(NA, 200)) +
scale_y_log10() +
labs(x = 'k', y = 'ACD') +
theme(legend.position = 'none')
# ------------------------------------------------------------------------------
# AIKS
# ------------------------------------------------------------------------------
plotAIKSTrunc = diagTrunc %>%
filter(Method == 'AIKS') %>%
ggplot(aes(m, Value, group = 1)) +
geom_point(aes(shape = Below, color = Below), size = 2) +
scale_shape_manual(values = c('FALSE' = 17, 'TRUE' = 15)) +
geom_line(color = 'gray45') +
geom_hline(yintercept = aiksCutoff, linetype = 2) +
# coord_cartesian(ylim = c(NA, 10)) +
scale_y_log10() +
labs(x = 'k', y = 'AIKS') +
theme(legend.position = 'none')
# ------------------------------------------------------------------------------
# Combine plots
# ------------------------------------------------------------------------------
# plotDiag = ggarrange(plotESSTrunc, plotACDTrunc, plotAIKSTrunc, nrow = 1, top = grid::textGrob('Truncation method: Diagnostics', gp = gpar(fontsize = 13), x = 0.05, hjust = 0))
plotDiag = ggarrange(plotESSTrunc, plotACDTrunc, plotAIKSTrunc, nrow = 1)
ggsave(plot = plotDiag,
filename = paste0('figures_paper/n', n, '/compDiag', 100*(1-al),'.eps'),
# width = 6.2, height = 2)
width = 6.8, height = 2)
aiksCutoff
rm(list=ls())
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/bids2Trunc8.RData")
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/n3e+05/bids2AIKSTrunc8.RData")
timeaiksTrunc/60
rm(list=ls())
library(Rcpp); library(RcppArmadillo)
library(doParallel); library(foreach)
library(tidyverse); library(egg); library(gridExtra)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
#========================================================================
# ACD
#========================================================================
summax = 10
load(paste0('ACDAIKS/Trunc_knu/bids2AppxTrunc', summax, '.RData'))
nrow(Trunc[burn+1:300000,])
nrow(Trunc[burnin+1:300000,])
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/bids2Trunc10.RData")
nrow(Trunc[burnin+1:300000,])
nrow(Trunc[burn+1:300000,])
length(unique(Trunc[burn+1:300000,1]))
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/bids2Trunc8.RData")
length(unique(Trunc[burn+1:300000,1]))
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/bids2Trunc9.RData")
length(unique(Trunc[burn+1:300000,1]))
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Trunc_knu/bids2Trunc3.RData")
length(unique(Trunc[burn+1:300000,1]))
rm(list=ls())
library(dplyr); library(ggplot2); library(egg); library(gridExtra); library(grid)
library(batchmeans); library(mcmcse)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
al = 0.01
# al = 0.05
n = 300000
# n = 400000
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', 8, '.RData'))
aiksCutoff = quantile(aiksBootTrunc, 1-al)
# ==============================================================================
# Posterior samples
# ==============================================================================
sampleAll = data.frame()
### Truncation
for(i in c(3, 9)){
load(paste0('ACDAIKS/Trunc_knu/bids2Trunc', i, '.RData'))
df = data.frame(Sample = 'NormTrunc', m = as.factor(i), parameter = Trunc[burn+1:n,], time = rtime / nrow(Trunc) * n)
sampleAll = rbind(sampleAll, df)
}
### Gold standard
load('ACDAIKS/Murray_knu/bids2Murray.RData')
df = data.frame(Sample = 'Gold standard', m = NA, parameter = Murray, time = NA)
sampleAll = rbind(sampleAll, df)
cut.1 = sampleAll %>% filter(Sample == 'Gold standard') %>% summarise(Cut = quantile(parameter.1, c(0.05, 0.45, 0.5, 0.55, 0.95))) %>% unlist()
sumstatsAll.1 = sampleAll %>%
group_by(Sample, m) %>%
summarise(Mean = round(mean(parameter.1), 2),
Median = round(median(parameter.1), 2),
SD = round(sd(parameter.1), 2),
Prob1 = round(mean(parameter.1 <= cut.1[1]), 2),
Prob2 = round(mean(parameter.1 >= cut.1[2] & parameter.1 <= cut.1[3]), 2),
Prob3 = round(mean(parameter.1 >= cut.1[3] & parameter.1 <= cut.1[4]), 2),
Prob4 = round(mean(parameter.1 >= cut.1[5]), 2),
Time = format(round(mean(time)/60, 2), nsmall = 2))
sumstatsAll.1 %>% dplyr::select(Sample, m, Median, Prob1, Prob4, Time)
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source('RFtns.R')
#================================================================
# ACD using biased but consistent approximations
#================================================================
n = 300000
# n = 400000
N = 200000
# ACD -----------------------------------------------------
load('ACDAIKS/Murray_knu/bids2AppxMurray.RData')
nsets = length(appx)
p = ncol(Murray[[1]])
nrep = foreach(i = 1:nsets) %do% { sapply(1:nth[i], function(j) sum(th[[i]][j,1]==Murray[[i]][,1] & th[[i]][j,p]==Murray[[i]][,p])) }
dhat = foreach(i = 1:nsets) %do% { appx[[i]][, (p + 1):(p + p*(p+1)/2)] }
dhat = foreach(i = 1:nsets, .combine = rbind) %do% { sapply(1:(p*(p+1)/2), function(j) rep(dhat[[i]][,j], nrep[[i]])) }
ptm = proc.time()[3]
acdMurray = ACD_bm(dhat[1:n,], N)
timeacdMurray = proc.time()[3] - ptm
### Look at each parameter
cat(acdMurray, '(', qchisq(0.99, p*(p+1)/2), ')\n')
save(acdMurray, timeacdMurray, file = paste0('ACDAIKS/Murray_knu/n', n, '/bids2ACDMurray.RData'))
rm(list=ls())
library(Rcpp); library(RcppArmadillo)
library(doParallel); library(foreach)
library(tidyverse); library(egg); library(gridExtra)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
# ==============================================================================
# plot
# ==============================================================================
load('cost/cost_diag.RData')
nb = 1000
ncores = 20
N = 200000
data.cost.total = data.frame()
for(j in N){
dummy = data.cost %>%
add_column(N = j) %>%
mutate(simACD = paste0(round(sim*n*N/ncores/60/60, 2), ' hr'),
simAIKS = paste0(round(sim*nprime*N/ncores/60, 2), ' min'),
ACD = paste0(round(acd, 4), ' sec'), AIKS = paste0(round(aiks/60, 2), ' min')) %>%
select(n, N, simACD, simAIKS, ACD, AIKS)
data.cost.total = rbind(data.cost.total, dummy)
}
data.cost.total
20.68 + 0.03
nn = 300000
load("~/work/diagnostics/revision_comp_bm/ACDAIKS/Murray_knu/n3e+05/bids2AIKSMurray.RData")
aiksMurray
rm(list=ls())
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2ACDTrunc8.RData")
ACD_rep100
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2AIKSTrunc8.RData")
ACD_rep100
AIKS_rep100
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc9/bids2ACDTrunc9.RData")
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc9/bids2AIKSTrunc9.RData")
acd
ACD_rep100
AIKS_rep100
rm(list=ls())
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(MASS)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
#========================================================================
# Load data
#========================================================================
summax = 8
# summax = 9
# summax = 10
# summax = 20
# summax = 30
# summax = 100
load('data/bids2.RData')
Sx = t(X) %*% y
nu = 1.75214
### simulation by Gibbs sampler
N = 200000
# nn = 400000
nn = 300000
repi =49
# appx = c(); timeappx = 0; starti = 1
load(paste0('rep100/Trunc', summax, '/rep', repi, '_bids2AppxTrunc', summax, '.RData'))
starti = nrow(appx) + 1
load(paste0('ACDAIKS/Trunc_knu/bids2Trunc', summax, '.RData'))
Trunc = Trunc[burn+1:nn,]
niter = nrow(Trunc)
th = unique(Trunc)
nth = nrow(th)
nth
nrow(appx)
rm(list=ls())
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc9/bids2ACDTrunc9.RData")
round(sd(ACD_rep100), 2)
round(summary(ACD_rep100), 2)
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc9/bids2AIKSTrunc9.RData")
round(sd(AIKS_rep100), 2)
round(sd(AIKS_rep100), 3)
round(summary(AIKS_rep100), 3)
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
al = 0.01
# n = 400000
n = 300000
N = 200000
ncores = 20
summax = 8
# summax = 9
# summax = 10
# =========================================================
# ACD
# =========================================================
filenames = list.files(path = paste0("rep100/Trunc", summax), pattern = ".RData", all.files = TRUE, full.names = TRUE)
# ACD_rep100 = rep(0, 100); indices = 1:100
load(paste0('rep100/Trunc', summax, '/bids2ACDTrunc', summax, '.RData'))
indices = which(ACD_rep100 == 0)
indices
# excl = c(58, 46, 59, 49, 50, 48, 51, 55, 52, 56, 57, 47, 54, 53, 60)
excl = c(49, 56)
indices = indices[-excl]
indices
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
al = 0.01
# n = 400000
n = 300000
N = 200000
ncores = 20
summax = 8
# summax = 9
# summax = 10
# =========================================================
# ACD
# =========================================================
filenames = list.files(path = paste0("rep100/Trunc", summax), pattern = ".RData", all.files = TRUE, full.names = TRUE)
# ACD_rep100 = rep(0, 100); indices = 1:100
load(paste0('rep100/Trunc', summax, '/bids2ACDTrunc', summax, '.RData'))
indices = which(ACD_rep100 == 0)
# excl = c(58, 46, 59, 49, 50, 48, 51, 55, 52, 56, 57, 47, 54, 53, 60)
excl = c(49, 56)
indices = indices[-excl]
indices
indices[-excl]
indices = indices[(indices != excl)]
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
al = 0.01
# n = 400000
n = 300000
N = 200000
ncores = 20
summax = 8
# summax = 9
# summax = 10
# =========================================================
# ACD
# =========================================================
filenames = list.files(path = paste0("rep100/Trunc", summax), pattern = ".RData", all.files = TRUE, full.names = TRUE)
# ACD_rep100 = rep(0, 100); indices = 1:100
load(paste0('rep100/Trunc', summax, '/bids2ACDTrunc', summax, '.RData'))
indices = which(ACD_rep100 == 0)
indices != excl
# excl = c(58, 46, 59, 49, 50, 48, 51, 55, 52, 56, 57, 47, 54, 53, 60)
excl = c(49, 56)
(indices != excl)
indices = excl
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
al = 0.01
# n = 400000
n = 300000
N = 200000
ncores = 20
summax = 8
# summax = 9
# summax = 10
# =========================================================
# ACD
# =========================================================
filenames = list.files(path = paste0("rep100/Trunc", summax), pattern = ".RData", all.files = TRUE, full.names = TRUE)
# ACD_rep100 = rep(0, 100); indices = 1:100
load(paste0('rep100/Trunc', summax, '/bids2ACDTrunc', summax, '.RData'))
indices = which(ACD_rep100 == 0)
# excl = c(58, 46, 59, 49, 50, 48, 51, 55, 52, 56, 57, 47, 54, 53, 60)
excl = c(49, 56)
indices %in% excl
!(indices %in% excl)
indices = indices[!(indices %in% excl)]
indices
rm(list=ls())
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2ACDTrunc8.RData")
round(sd(ACD_rep100), 2)
round(summary(ACD_rep100), 2)
round(sd(ACD_rep100[ACD_rep100 != 0]), 2)
round(summary(ACD_rep100[ACD_rep100 != 0]), 2)
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2AIKSTrunc8.RData")
round(sd(AIKS_rep100[ACD_rep100 != 0]), 3)
round(summary(AIKS_rep100[ACD_rep100 != 0]), 3)
rm(list=ls())
library(dplyr); library(ggplot2); library(egg); library(gridExtra); library(grid)
library(batchmeans); library(mcmcse)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
al = 0.01
# al = 0.05
n = 300000
# n = 400000
load(paste0('ACDAIKS/Trunc_knu/n', n, '/bids2AIKSTrunc', 8, '.RData'))
aiksCutoff = quantile(aiksBootTrunc, 1-al)
aiksCutoff
rm(list=ls())
library(fields)
library(lattice)
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
source("RFtns.R")
al = 0.01
# n = 400000
n = 300000
N = 200000
ncores = 20
summax = 8
# summax = 9
# summax = 10
# =========================================================
# ACD
# =========================================================
filenames = list.files(path = paste0("rep100/Trunc", summax), pattern = ".RData", all.files = TRUE, full.names = TRUE)
# ACD_rep100 = rep(0, 100); indices = 1:100
load(paste0('rep100/Trunc', summax, '/bids2ACDTrunc', summax, '.RData'))
indices = which(ACD_rep100 == 0)
indices
rm(list=ls())
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2AIKSTrunc8.RData")
round(sd(AIKS_rep100), 3)
round(summary(AIKS_rep100), 3)
load("~/work/diagnostics/revision_comp_bm/rep100/Trunc8/bids2ACDTrunc8.RData")
round(sd(ACD_rep100), 3)
round(sd(ACD_rep100), 2)
round(summary(ACD_rep100), 2)
