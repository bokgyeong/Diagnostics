rm(list=ls())
library(coda)
library(Rcpp)
library(RcppArmadillo)
library(MASS)
library(snow)
library(doParallel)
library(foreach)
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")


#========================================================================
# Load data
#========================================================================
summax = 8
# summax = 9
# summax = 10
# summax = 30
# summax = 100

load('data/bids2.RData')
load(paste0('diag/Trunc_knu/bids2Trunc', summax, '.RData'))


#========================================================================
# biased but consistent approximation
#========================================================================
Trunc = Trunc[-(1:burn),]
niter = nrow(Trunc)

th = unique(Trunc)
nth = nrow(th)

Sx = t(X) %*% y
nu = 1.75214

### simulation by Gibbs sampler
N = 200000 



# set up for parallelization ----------
cl = parallel::makeCluster(19, type = "PSOCK")
doParallel::registerDoParallel(cl)
# ------------------------------------

outers = unique(c(0, seq(15, 100, by = 15), 100))

start = 1
# start = 2
# start = 3
# start = 4
# start = 5
# start = 6
# start = 7

for(repi in (outers[start]+1):(outers[start+1])){
  
  ptm = proc.time()[3]
  appx = foreach(i = 1:nth, .combine = 'rbind', .packages = "Rcpp") %dopar% {
    source('RFtns.R')
    sourceCpp("RcppFtns.cpp")
    
    theta = th[i,]
    Sy = rCOMP2_parallel_knu(X, theta, nu, N, 1)
    
    Uhat = f_Uhat_knu(Sx, Sy, nu)
    dhat = f_dhat_knu(Sx, Sy, nu, Uhat)
    
    c(Uhat, dhat)
  }
  timeappx = proc.time()[3] - ptm
  
  save(Trunc, th, nth, Sx, appx, timeappx, nu, file = paste0('rep100/Trunc', summax, '/rep', repi, '_bids2AppxTrunc', summax, '.RData'))
}


